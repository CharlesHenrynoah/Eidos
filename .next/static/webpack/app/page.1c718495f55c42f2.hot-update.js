"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./components/Canvas3DVisualization.tsx":
/*!**********************************************!*\
  !*** ./components/Canvas3DVisualization.tsx ***!
  \**********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Canvas3DVisualization; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.16_@opentelemetry+api@1.9.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.16_@opentelemetry+api@1.9.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _barrel_optimize_names_Code_TrendingUp_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=Code,TrendingUp,Zap!=!lucide-react */ \"(app-pages-browser)/./node_modules/.pnpm/lucide-react@0.454.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/trending-up.js\");\n/* harmony import */ var _barrel_optimize_names_Code_TrendingUp_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=Code,TrendingUp,Zap!=!lucide-react */ \"(app-pages-browser)/./node_modules/.pnpm/lucide-react@0.454.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/code.js\");\n/* harmony import */ var _barrel_optimize_names_Code_TrendingUp_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=Code,TrendingUp,Zap!=!lucide-react */ \"(app-pages-browser)/./node_modules/.pnpm/lucide-react@0.454.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/zap.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nfunction Canvas3DVisualization(param) {\n    let { data, columns, visualizationType, generatedConfig } = param;\n    _s();\n    const plotRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [isV0Generated, setIsV0Generated] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [plotlyLoaded, setPlotlyLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [dataMapping, setDataMapping] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [currentModel, setCurrentModel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"scatter3d\");\n    const [dataAnalysis, setDataAnalysis] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Fonction pour gérer la visualisation générée par l'API\n    const renderV0Visualization = async (config)=>{\n        const plotElement = plotRef.current;\n        if (!plotElement) return;\n        try {\n            // Utiliser la configuration générée par l'API\n            if (config.plotData && config.layout) {\n                await window.Plotly.newPlot(plotElement, config.plotData, config.layout, getPlotConfig());\n            } else {\n                // Fallback sur la configuration par défaut\n                const analysis = analyzeDataIntelligently();\n                if (!analysis) return;\n                renderModelSpecificVisualization();\n            }\n        } catch (error) {\n            console.error(\"Erreur lors du rendu V0:\", error);\n            const analysis = analyzeDataIntelligently();\n            if (!analysis) return;\n            renderClassicScatter(analysis);\n        }\n    };\n    // Charger Plotly.js\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if ( true && !window.Plotly) {\n            const script = document.createElement(\"script\");\n            script.src = \"https://cdn.plot.ly/plotly-2.35.2.min.js\";\n            script.onload = ()=>setPlotlyLoaded(true);\n            script.onerror = ()=>{\n                console.error(\"Erreur lors du chargement de Plotly.js\");\n                setPlotlyLoaded(false);\n            };\n            document.head.appendChild(script);\n        } else if (window.Plotly) {\n            setPlotlyLoaded(true);\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!plotlyLoaded || !plotRef.current) return;\n        const updateVisualization = async ()=>{\n            const plotElement = plotRef.current;\n            if (!plotElement) return;\n            // Nettoyer le graphique précédent\n            if (plotElement.children.length > 0) {\n                window.Plotly.purge(plotElement);\n            }\n            setCurrentModel(visualizationType);\n            try {\n                if (generatedConfig) {\n                    await renderV0Visualization(generatedConfig);\n                    setIsV0Generated(true);\n                } else {\n                    await renderModelSpecificVisualization();\n                    setIsV0Generated(false);\n                }\n            } catch (error) {\n                console.error(\"Erreur lors de la mise \\xe0 jour de la visualisation:\", error);\n                // En cas d'erreur, on revient au nuage de points basique\n                renderClassicScatter(analyzeDataIntelligently() || {\n                    mapping: {\n                        xAxis: columns[0] || \"index\",\n                        yAxis: columns[1] || \"index\",\n                        zAxis: columns[2] || \"index\",\n                        colorBy: columns[0] || \"index\",\n                        sizeBy: columns[1] || \"index\"\n                    },\n                    numericColumns: columns,\n                    categoricalColumns: [],\n                    temporalColumns: [],\n                    dataRanges: {},\n                    categories: {},\n                    dataTypes: {}\n                });\n            }\n        };\n        updateVisualization();\n    }, [\n        plotlyLoaded,\n        data,\n        columns,\n        visualizationType,\n        generatedConfig\n    ]);\n    // Analyse complète et intelligente des données\n    const analyzeDataIntelligently = ()=>{\n        if (!data || data.length === 0 || !columns || columns.length === 0) {\n            return null;\n        }\n        const analysis = {\n            mapping: {},\n            numericColumns: [],\n            categoricalColumns: [],\n            temporalColumns: [],\n            dataRanges: {},\n            categories: {},\n            dataTypes: {}\n        };\n        // Analyser chaque colonne en détail\n        columns.forEach((col)=>{\n            const values = data.map((row)=>row[col]).filter((val)=>val != null && val !== \"\");\n            if (values.length === 0) {\n                analysis.dataTypes[col] = \"mixed\";\n                return;\n            }\n            // Test numérique\n            const numericValues = values.map((val)=>Number.parseFloat(val)).filter((val)=>!isNaN(val) && isFinite(val));\n            const numericRatio = numericValues.length / values.length;\n            // Test temporel\n            const dateValues = values.filter((val)=>{\n                const date = new Date(val);\n                return !isNaN(date.getTime()) && date.getFullYear() > 1900 && date.getFullYear() < 2100;\n            });\n            const temporalRatio = dateValues.length / values.length;\n            // Test catégoriel\n            const uniqueValues = [\n                ...new Set(values)\n            ];\n            const uniqueRatio = uniqueValues.length / values.length;\n            // Classification intelligente\n            if (temporalRatio > 0.7) {\n                analysis.dataTypes[col] = \"temporal\";\n                analysis.temporalColumns.push(col);\n                // Convertir en timestamps pour les calculs\n                const timestamps = dateValues.map((val)=>new Date(val).getTime());\n                analysis.dataRanges[col] = {\n                    min: Math.min(...timestamps),\n                    max: Math.max(...timestamps),\n                    values: timestamps\n                };\n            } else if (numericRatio > 0.7) {\n                analysis.dataTypes[col] = \"numeric\";\n                analysis.numericColumns.push(col);\n                analysis.dataRanges[col] = {\n                    min: Math.min(...numericValues),\n                    max: Math.max(...numericValues),\n                    values: numericValues\n                };\n            } else if (uniqueRatio < 0.3 || uniqueValues.length <= 20) {\n                analysis.dataTypes[col] = \"categorical\";\n                analysis.categoricalColumns.push(col);\n                analysis.categories[col] = uniqueValues.slice(0, 20) // Limiter à 20 catégories\n                ;\n            } else {\n                analysis.dataTypes[col] = \"mixed\";\n                if (numericValues.length > 0) {\n                    analysis.dataRanges[col] = {\n                        min: Math.min(...numericValues),\n                        max: Math.max(...numericValues),\n                        values: numericValues\n                    };\n                }\n            }\n        });\n        // Créer un mapping intelligent basé sur les types de données\n        const allNumericCols = [\n            ...analysis.numericColumns,\n            ...analysis.temporalColumns\n        ];\n        if (allNumericCols.length >= 3) {\n            analysis.mapping = {\n                xAxis: allNumericCols[0],\n                yAxis: allNumericCols[1],\n                zAxis: allNumericCols[2],\n                colorBy: allNumericCols[0],\n                sizeBy: allNumericCols.length > 3 ? allNumericCols[3] : allNumericCols[0],\n                categoryBy: analysis.categoricalColumns[0]\n            };\n        } else if (allNumericCols.length === 2) {\n            analysis.mapping = {\n                xAxis: allNumericCols[0],\n                yAxis: allNumericCols[1],\n                zAxis: allNumericCols[0],\n                colorBy: allNumericCols[1],\n                sizeBy: allNumericCols[0],\n                categoryBy: analysis.categoricalColumns[0]\n            };\n        } else if (allNumericCols.length === 1) {\n            analysis.mapping = {\n                xAxis: allNumericCols[0],\n                yAxis: \"index\",\n                zAxis: allNumericCols[0],\n                colorBy: allNumericCols[0],\n                sizeBy: allNumericCols[0],\n                categoryBy: analysis.categoricalColumns[0]\n            };\n        } else {\n            // Utiliser les indices et catégories\n            analysis.mapping = {\n                xAxis: \"index\",\n                yAxis: analysis.categoricalColumns[0] || \"index\",\n                zAxis: \"count\",\n                colorBy: analysis.categoricalColumns[0] || \"index\",\n                sizeBy: \"count\",\n                categoryBy: analysis.categoricalColumns[0]\n            };\n        }\n        return analysis;\n    };\n    // Fonction principale qui route vers la bonne visualisation selon le modèle\n    const renderModelSpecificVisualization = ()=>{\n        if (!data || data.length === 0) {\n            renderDemoVisualization();\n            return;\n        }\n        const analysis = analyzeDataIntelligently();\n        if (!analysis) {\n            renderDemoVisualization();\n            return;\n        }\n        setDataAnalysis(analysis);\n        setDataMapping(analysis.mapping);\n        // Router vers la fonction spécialisée selon le modèle exact\n        switch(visualizationType){\n            // NUAGES\n            case \"scatter3d\":\n                renderClassicScatter(analysis);\n                break;\n            case \"scatter_bubble\":\n                renderBubbleScatter(analysis);\n                break;\n            case \"scatter_animated\":\n                renderAnimatedScatter(analysis);\n                break;\n            case \"scatter_clustered\":\n                renderClusteredScatter(analysis);\n                break;\n            case \"scatter_density\":\n                renderDensityScatter(analysis);\n                break;\n            // SURFACES\n            case \"surface3d\":\n                renderClassicSurface(analysis);\n                break;\n            case \"surface_contour\":\n                renderContourSurface(analysis);\n                break;\n            case \"surface_mesh\":\n                renderMeshSurface(analysis);\n                break;\n            case \"surface_gradient\":\n                renderGradientSurface(analysis);\n                break;\n            // ARCHITECTURE\n            case \"bars3d\":\n                renderClassicBars(analysis);\n                break;\n            case \"bars_grouped\":\n                renderGroupedBars(analysis);\n                break;\n            case \"bars_cylindrical\":\n                renderCylindricalBars(analysis);\n                break;\n            case \"bars_pyramid\":\n                renderPyramidBars(analysis);\n                break;\n            // GÉOMÉTRIQUES\n            case \"sphere_pack\":\n                renderSpherePack(analysis);\n                break;\n            case \"cube_matrix\":\n                renderCubeMatrix(analysis);\n                break;\n            case \"cone_field\":\n                renderConeField(analysis);\n                break;\n            case \"helix_spiral\":\n                renderHelixSpiral(analysis);\n                break;\n            // ARTISTIQUES\n            case \"mandala_3d\":\n                renderMandala3D(analysis);\n                break;\n            case \"fractal_3d\":\n                renderFractal3D(analysis);\n                break;\n            case \"crystal_3d\":\n                renderCrystal3D(analysis);\n                break;\n            case \"galaxy_3d\":\n                renderGalaxy3D(analysis);\n                break;\n            case \"dna_helix\":\n                renderDNAHelix(analysis);\n                break;\n            // RÉSEAUX\n            case \"network_3d\":\n                renderNetwork3D(analysis);\n                break;\n            case \"tree_3d\":\n                renderTree3D(analysis);\n                break;\n            // TEMPORELS\n            case \"timeline_3d\":\n                renderTimeline3D(analysis);\n                break;\n            case \"wave_temporal\":\n                renderWaveTemporal(analysis);\n                break;\n            case \"spiral_time\":\n                renderSpiralTime(analysis);\n                break;\n            // GÉOGRAPHIQUES\n            case \"globe_3d\":\n                renderGlobe3D(analysis);\n                break;\n            case \"terrain_3d\":\n                renderTerrain3D(analysis);\n                break;\n            // SCIENTIFIQUES\n            case \"molecule_3d\":\n                renderMolecule3D(analysis);\n                break;\n            case \"vector_field\":\n                renderVectorField(analysis);\n                break;\n            // STATISTIQUES\n            case \"histogram_3d\":\n                renderHistogram3D(analysis);\n                break;\n            case \"box_plot_3d\":\n                renderBoxPlot3D(analysis);\n                break;\n            default:\n                renderClassicScatter(analysis);\n        }\n    };\n    // Fonction utilitaire pour extraire les valeurs avec l'analyse\n    const getValuesFromAnalysis = (analysis, key)=>{\n        const column = analysis.mapping[key];\n        if (column === \"index\") {\n            return data.map((_, i)=>i);\n        } else if (column === \"count\") {\n            return data.map(()=>1);\n        } else if (column && columns.includes(column)) {\n            if (analysis.dataRanges[column]) {\n                // Utiliser les valeurs pré-calculées pour les colonnes numériques/temporelles\n                const range = analysis.dataRanges[column];\n                return data.map((row, i)=>{\n                    const val = row[column];\n                    if (analysis.dataTypes[column] === \"temporal\") {\n                        const timestamp = new Date(val).getTime();\n                        return isNaN(timestamp) ? range.min : timestamp;\n                    } else {\n                        const numVal = Number.parseFloat(val);\n                        return !isNaN(numVal) && isFinite(numVal) ? numVal : range.min;\n                    }\n                });\n            } else if (analysis.categories[column]) {\n                // Convertir les catégories en indices numériques\n                const categories = analysis.categories[column];\n                return data.map((row)=>{\n                    const val = row[column];\n                    const index = categories.indexOf(val);\n                    return index >= 0 ? index : 0;\n                });\n            }\n        }\n        return data.map((_, i)=>i);\n    };\n    // VISUALISATIONS SPÉCIALISÉES AVEC DONNÉES DYNAMIQUES\n    // 1. NUAGE CLASSIQUE - Adapté aux données\n    const renderClassicScatter = (analysis)=>{\n        const xValues = getValuesFromAnalysis(analysis, \"xAxis\");\n        const yValues = getValuesFromAnalysis(analysis, \"yAxis\");\n        const zValues = getValuesFromAnalysis(analysis, \"zAxis\");\n        const colorValues = getValuesFromAnalysis(analysis, \"colorBy\");\n        // Adapter la taille des marqueurs selon la densité des données\n        const markerSize = Math.max(3, Math.min(12, 100 / Math.sqrt(data.length)));\n        const plotData = [\n            {\n                type: \"scatter3d\",\n                mode: \"markers\",\n                x: xValues,\n                y: yValues,\n                z: zValues,\n                marker: {\n                    size: markerSize,\n                    color: colorValues,\n                    colorscale: \"Viridis\",\n                    opacity: Math.max(0.6, 1 - data.length / 1000),\n                    colorbar: {\n                        title: analysis.mapping.colorBy,\n                        titlefont: {\n                            size: 10\n                        }\n                    }\n                },\n                text: data.map((row, i)=>{\n                    let tooltip = \"<b>Point \".concat(i + 1, \"</b><br>\");\n                    tooltip += \"<b>\".concat(analysis.mapping.xAxis, \":</b> \").concat(row[analysis.mapping.xAxis] || \"N/A\", \"<br>\");\n                    tooltip += \"<b>\".concat(analysis.mapping.yAxis, \":</b> \").concat(row[analysis.mapping.yAxis] || \"N/A\", \"<br>\");\n                    tooltip += \"<b>\".concat(analysis.mapping.zAxis, \":</b> \").concat(row[analysis.mapping.zAxis] || \"N/A\", \"<br>\");\n                    if (analysis.mapping.categoryBy && row[analysis.mapping.categoryBy]) {\n                        tooltip += \"<b>\".concat(analysis.mapping.categoryBy, \":</b> \").concat(row[analysis.mapping.categoryBy], \"<br>\");\n                    }\n                    return tooltip;\n                }),\n                hovertemplate: \"%{text}<extra></extra>\",\n                name: \"Nuage 3D - \".concat(data.length, \" points\")\n            }\n        ];\n        const layout = createDynamicLayout(\"Nuage 3D Classique\", analysis);\n        window.Plotly.newPlot(plotRef.current, plotData, layout, getPlotConfig());\n    };\n    // 2. DENSITÉ 3D - Vraie densité basée sur les données réelles\n    const renderDensityScatter = (analysis)=>{\n        const xValues = getValuesFromAnalysis(analysis, \"xAxis\");\n        const yValues = getValuesFromAnalysis(analysis, \"yAxis\");\n        const zValues = getValuesFromAnalysis(analysis, \"zAxis\");\n        // Adapter la résolution de la grille selon le nombre de données\n        const gridSize = Math.min(25, Math.max(10, Math.sqrt(data.length)));\n        const xRange = analysis.dataRanges[analysis.mapping.xAxis];\n        const yRange = analysis.dataRanges[analysis.mapping.yAxis];\n        const zRange = analysis.dataRanges[analysis.mapping.zAxis];\n        if (!xRange || !yRange || !zRange) {\n            renderClassicScatter(analysis);\n            return;\n        }\n        const densityX = [];\n        const densityY = [];\n        const densityZ = [];\n        const densityColors = [];\n        const densitySizes = [];\n        // Calculer le rayon adaptatif basé sur les vraies données\n        const xSpan = xRange.max - xRange.min;\n        const ySpan = yRange.max - yRange.min;\n        const zSpan = zRange.max - zRange.min;\n        const radius = Math.max(xSpan, ySpan, zSpan) / (gridSize * 0.8);\n        for(let i = 0; i < gridSize; i++){\n            for(let j = 0; j < gridSize; j++){\n                for(let k = 0; k < gridSize; k++){\n                    const x = xRange.min + i / (gridSize - 1) * xSpan;\n                    const y = yRange.min + j / (gridSize - 1) * ySpan;\n                    const z = zRange.min + k / (gridSize - 1) * zSpan;\n                    // Calculer la densité locale avec les vraies données\n                    let density = 0;\n                    for(let p = 0; p < data.length; p++){\n                        const dx = xValues[p] - x;\n                        const dy = yValues[p] - y;\n                        const dz = zValues[p] - z;\n                        const distance = Math.sqrt(dx * dx + dy * dy + dz * dz);\n                        if (distance < radius) {\n                            density += Math.exp(-(distance * distance) / (radius * radius));\n                        }\n                    }\n                    // Seuil adaptatif basé sur la densité moyenne\n                    const threshold = data.length / (gridSize * gridSize * gridSize) * 0.5;\n                    if (density > threshold) {\n                        densityX.push(x);\n                        densityY.push(y);\n                        densityZ.push(z);\n                        densityColors.push(density);\n                        densitySizes.push(Math.max(4, Math.min(20, density * 15)));\n                    }\n                }\n            }\n        }\n        const plotData = [\n            {\n                type: \"scatter3d\",\n                mode: \"markers\",\n                x: densityX,\n                y: densityY,\n                z: densityZ,\n                marker: {\n                    size: densitySizes,\n                    color: densityColors,\n                    colorscale: \"Hot\",\n                    opacity: 0.7,\n                    colorbar: {\n                        title: \"Densit\\xe9 Locale\",\n                        titlefont: {\n                            size: 10\n                        }\n                    }\n                },\n                text: densityX.map((_, i)=>\"<b>Zone Dense \".concat(i + 1, \"</b><br>Densit\\xe9: \").concat(densityColors[i].toFixed(2), \"<br>Position: (\").concat(densityX[i].toFixed(1), \", \").concat(densityY[i].toFixed(1), \", \").concat(densityZ[i].toFixed(1), \")\")),\n                hovertemplate: \"%{text}<extra></extra>\",\n                name: \"Densit\\xe9 3D - \".concat(densityX.length, \" zones\")\n            }\n        ];\n        const layout = createDynamicLayout(\"Densit\\xe9 3D - Zones de Concentration\", analysis);\n        window.Plotly.newPlot(plotRef.current, plotData, layout, getPlotConfig());\n    };\n    // 3. BULLES 3D - Tailles vraiment proportionnelles aux données\n    const renderBubbleScatter = (analysis)=>{\n        const xValues = getValuesFromAnalysis(analysis, \"xAxis\");\n        const yValues = getValuesFromAnalysis(analysis, \"yAxis\");\n        const zValues = getValuesFromAnalysis(analysis, \"zAxis\");\n        const colorValues = getValuesFromAnalysis(analysis, \"colorBy\");\n        const sizeValues = getValuesFromAnalysis(analysis, \"sizeBy\");\n        // Adapter la taille des bulles selon les données\n        const minSize = 10;\n        const maxSize = 50;\n        const normalizedSizes = sizeValues.map((v)=>{\n            const min = Math.min(...sizeValues);\n            const max = Math.max(...sizeValues);\n            return minSize + (v - min) / (max - min) * (maxSize - minSize);\n        });\n        const plotData = [\n            {\n                type: \"scatter3d\",\n                mode: \"markers\",\n                x: xValues,\n                y: yValues,\n                z: zValues,\n                marker: {\n                    size: normalizedSizes,\n                    color: colorValues,\n                    colorscale: \"Plasma\",\n                    opacity: 0.75,\n                    colorbar: {\n                        title: analysis.mapping.colorBy,\n                        titlefont: {\n                            size: 10\n                        }\n                    },\n                    line: {\n                        color: \"rgba(255, 255, 255, 0.3)\",\n                        width: 1\n                    }\n                },\n                text: data.map((row, i)=>{\n                    let tooltip = \"<b>Bulle \".concat(i + 1, \"</b><br>\");\n                    tooltip += \"<b>Taille (\".concat(analysis.mapping.sizeBy, \"):</b> \").concat(row[analysis.mapping.sizeBy] || \"N/A\", \"<br>\");\n                    tooltip += \"<b>Couleur (\".concat(analysis.mapping.colorBy, \"):</b> \").concat(row[analysis.mapping.colorBy] || \"N/A\", \"<br>\");\n                    if (analysis.mapping.categoryBy && row[analysis.mapping.categoryBy]) {\n                        tooltip += \"<b>Cat\\xe9gorie:</b> \".concat(row[analysis.mapping.categoryBy], \"<br>\");\n                    }\n                    return tooltip;\n                }),\n                hovertemplate: \"%{text}<extra></extra>\",\n                name: \"Bulles 3D - \".concat(data.length, \" \\xe9l\\xe9ments\")\n            }\n        ];\n        const layout = createDynamicLayout(\"Bulles 3D - Tailles Proportionnelles\", analysis);\n        window.Plotly.newPlot(plotRef.current, plotData, layout, getPlotConfig());\n    };\n    // 4. MANDALA 3D - Basé sur les patterns des données\n    const renderMandala3D = (analysis)=>{\n        const colorValues = getValuesFromAnalysis(analysis, \"colorBy\");\n        const sizeValues = getValuesFromAnalysis(analysis, \"sizeBy\");\n        const mandalaX = [];\n        const mandalaY = [];\n        const mandalaZ = [];\n        const mandalaColors = [];\n        const mandalaSizes = [];\n        // Utiliser les vraies données pour créer les patterns\n        data.forEach((row, i)=>{\n            const normalizedIndex = i / data.length;\n            const colorVal = colorValues[i];\n            const sizeVal = sizeValues[i];\n            // Nombre de tours basé sur la variance des données\n            const colorRange = analysis.dataRanges[analysis.mapping.colorBy];\n            const tours = colorRange ? 4 + (colorVal - colorRange.min) / (colorRange.max - colorRange.min) * 4 : 6;\n            const angle = normalizedIndex * tours * Math.PI;\n            const radius = 1 + Math.sin(angle * 3) * 0.5;\n            const height = Math.sin(angle * 2) * 0.3;\n            // Point principal\n            mandalaX.push(Math.cos(angle) * radius);\n            mandalaY.push(Math.sin(angle) * radius);\n            mandalaZ.push(height);\n            mandalaColors.push(colorVal);\n            mandalaSizes.push(Math.max(3, Math.min(8, sizeVal / ((colorRange === null || colorRange === void 0 ? void 0 : colorRange.max) || 1) * 6 + 3)));\n            // Pétales basés sur les catégories\n            const numPetals = analysis.mapping.categoryBy && analysis.categories[analysis.mapping.categoryBy] ? Math.min(6, analysis.categories[analysis.mapping.categoryBy].length) : 5;\n            for(let j = 0; j < numPetals; j++){\n                const petalAngle = angle + j * 2 * Math.PI / numPetals;\n                const petalRadius = radius * 0.3;\n                mandalaX.push(Math.cos(angle) * radius + Math.cos(petalAngle) * petalRadius);\n                mandalaY.push(Math.sin(angle) * radius + Math.sin(petalAngle) * petalRadius);\n                mandalaZ.push(height + Math.sin(petalAngle * 2) * 0.1);\n                mandalaColors.push(colorVal * 0.8);\n                mandalaSizes.push(Math.max(2, mandalaSizes[mandalaSizes.length - 1] * 0.6));\n            }\n        });\n        const plotData = [\n            {\n                type: \"scatter3d\",\n                mode: \"markers\",\n                x: mandalaX,\n                y: mandalaY,\n                z: mandalaZ,\n                marker: {\n                    size: mandalaSizes,\n                    color: mandalaColors,\n                    colorscale: \"Rainbow\",\n                    opacity: 0.8,\n                    colorbar: {\n                        title: \"Harmonie (\".concat(analysis.mapping.colorBy, \")\"),\n                        titlefont: {\n                            size: 10\n                        }\n                    }\n                },\n                name: \"Mandala 3D - \".concat(data.length, \" \\xe9l\\xe9ments source\")\n            }\n        ];\n        const layout = createDynamicLayout(\"Mandala 3D - Motifs Sacr\\xe9s\", analysis);\n        layout.scene.camera = {\n            eye: {\n                x: 0,\n                y: 0,\n                z: 2.5\n            }\n        };\n        window.Plotly.newPlot(plotRef.current, plotData, layout, getPlotConfig());\n    };\n    // 5. GALAXIE 3D - Structure basée sur les données\n    const renderGalaxy3D = (analysis)=>{\n        const colorValues = getValuesFromAnalysis(analysis, \"colorBy\");\n        const sizeValues = getValuesFromAnalysis(analysis, \"sizeBy\");\n        const galaxyX = [];\n        const galaxyY = [];\n        const galaxyZ = [];\n        const galaxyColors = [];\n        const galaxySizes = [];\n        // Analyser la distribution pour créer les bras galactiques\n        const colorRange = analysis.dataRanges[analysis.mapping.colorBy];\n        const sizeRange = analysis.dataRanges[analysis.mapping.sizeBy];\n        data.forEach((row, i)=>{\n            const t = i / data.length;\n            const colorVal = colorValues[i];\n            const sizeVal = sizeValues[i];\n            // Position dans la galaxie basée sur les valeurs des données\n            const normalizedColor = colorRange ? (colorVal - colorRange.min) / (colorRange.max - colorRange.min) : t;\n            const normalizedSize = sizeRange ? (sizeVal - sizeRange.min) / (sizeRange.max - sizeRange.min) : 0.5;\n            // Angle et rayon basés sur les données\n            const angle = normalizedColor * 6 * Math.PI + t * 2 * Math.PI;\n            const radius = normalizedSize * 3 + t * 0.5;\n            const height = (Math.random() - 0.5) * 0.2 * (1 - t // Plus plat vers l'extérieur\n            );\n            // Bras principal\n            galaxyX.push(Math.cos(angle) * radius);\n            galaxyY.push(Math.sin(angle) * radius);\n            galaxyZ.push(height);\n            galaxyColors.push(colorVal);\n            galaxySizes.push(Math.max(2, Math.min(12, (1 - normalizedSize) * 8 + 3)));\n            // Bras secondaire si assez de données\n            if (data.length > 20) {\n                const angle2 = angle + Math.PI * 0.8;\n                const radius2 = radius * 0.7;\n                galaxyX.push(Math.cos(angle2) * radius2);\n                galaxyY.push(Math.sin(angle2) * radius2);\n                galaxyZ.push(height * 0.5);\n                galaxyColors.push(colorVal * 0.8);\n                galaxySizes.push(Math.max(1, galaxySizes[galaxySizes.length - 1] * 0.7));\n            }\n        });\n        const plotData = [\n            {\n                type: \"scatter3d\",\n                mode: \"markers\",\n                x: galaxyX,\n                y: galaxyY,\n                z: galaxyZ,\n                marker: {\n                    size: galaxySizes,\n                    color: galaxyColors,\n                    colorscale: \"Viridis\",\n                    opacity: 0.8,\n                    colorbar: {\n                        title: \"Luminosit\\xe9 (\".concat(analysis.mapping.colorBy, \")\"),\n                        titlefont: {\n                            size: 10\n                        }\n                    }\n                },\n                name: \"Galaxie 3D - \".concat(data.length, \" \\xe9toiles\")\n            }\n        ];\n        const layout = createDynamicLayout(\"Galaxie 3D - Spirale Cosmique\", analysis);\n        layout.scene.bgcolor = \"rgba(0, 0, 20, 0.9)\";\n        layout.scene.camera = {\n            eye: {\n                x: 1.5,\n                y: 1.5,\n                z: 1\n            }\n        };\n        window.Plotly.newPlot(plotRef.current, plotData, layout, getPlotConfig());\n    };\n    // 6. TIMELINE 3D - Pour données temporelles\n    const renderTimeline3D = (analysis)=>{\n        // Chercher une colonne temporelle\n        const timeColumn = analysis.temporalColumns[0] || analysis.mapping.xAxis;\n        const valueColumn = analysis.mapping.yAxis;\n        const colorColumn = analysis.mapping.colorBy;\n        const timeValues = getValuesFromAnalysis(analysis, \"xAxis\");\n        const values = getValuesFromAnalysis(analysis, \"yAxis\");\n        const colorValues = getValuesFromAnalysis(analysis, \"colorBy\");\n        // Trier par temps si c'est temporel\n        const sortedIndices = timeValues.map((_, i)=>i).sort((a, b)=>timeValues[a] - timeValues[b]);\n        const timelineX = sortedIndices.map((i)=>timeValues[i]);\n        const timelineY = sortedIndices.map((i)=>values[i]);\n        const timelineZ = sortedIndices.map((_, i)=>i * 0.1) // Élévation progressive\n        ;\n        const timelineColors = sortedIndices.map((i)=>colorValues[i]);\n        const plotData = [\n            {\n                type: \"scatter3d\",\n                mode: \"markers+lines\",\n                x: timelineX,\n                y: timelineY,\n                z: timelineZ,\n                marker: {\n                    size: 6,\n                    color: timelineColors,\n                    colorscale: \"Viridis\",\n                    opacity: 0.8,\n                    colorbar: {\n                        title: analysis.mapping.colorBy,\n                        titlefont: {\n                            size: 10\n                        }\n                    }\n                },\n                line: {\n                    color: \"rgba(100, 100, 100, 0.6)\",\n                    width: 3\n                },\n                text: sortedIndices.map((i)=>{\n                    const row = data[i];\n                    let tooltip = \"<b>Point temporel \".concat(i + 1, \"</b><br>\");\n                    tooltip += \"<b>Temps:</b> \".concat(row[timeColumn] || \"N/A\", \"<br>\");\n                    tooltip += \"<b>Valeur:</b> \".concat(row[valueColumn] || \"N/A\", \"<br>\");\n                    return tooltip;\n                }),\n                hovertemplate: \"%{text}<extra></extra>\",\n                name: \"Timeline 3D - \".concat(data.length, \" points\")\n            }\n        ];\n        const layout = createDynamicLayout(\"Timeline 3D - \\xc9volution Temporelle\", analysis);\n        window.Plotly.newPlot(plotRef.current, plotData, layout, getPlotConfig());\n    };\n    // Fonctions de rendu simplifiées pour les autres modèles\n    const renderAnimatedScatter = (analysis)=>renderClassicScatter(analysis);\n    const renderClusteredScatter = (analysis)=>renderBubbleScatter(analysis);\n    const renderClassicSurface = (analysis)=>renderContourSurface(analysis);\n    const renderMeshSurface = (analysis)=>renderContourSurface(analysis);\n    const renderGradientSurface = (analysis)=>renderContourSurface(analysis);\n    const renderClassicBars = (analysis)=>renderBubbleScatter(analysis);\n    const renderGroupedBars = (analysis)=>renderBubbleScatter(analysis);\n    const renderCylindricalBars = (analysis)=>renderBubbleScatter(analysis);\n    const renderPyramidBars = (analysis)=>renderBubbleScatter(analysis);\n    const renderSpherePack = (analysis)=>renderBubbleScatter(analysis);\n    const renderCubeMatrix = (analysis)=>renderClassicScatter(analysis);\n    const renderConeField = (analysis)=>renderClassicScatter(analysis);\n    const renderHelixSpiral = (analysis)=>renderDNAHelix(analysis);\n    const renderFractal3D = (analysis)=>renderMandala3D(analysis);\n    const renderCrystal3D = (analysis)=>renderClassicScatter(analysis);\n    const renderNetwork3D = (analysis)=>renderClassicScatter(analysis);\n    const renderTree3D = (analysis)=>renderClassicScatter(analysis);\n    const renderWaveTemporal = (analysis)=>renderTimeline3D(analysis);\n    const renderSpiralTime = (analysis)=>renderTimeline3D(analysis);\n    const renderGlobe3D = (analysis)=>renderClassicScatter(analysis);\n    const renderTerrain3D = (analysis)=>renderContourSurface(analysis);\n    const renderMolecule3D = (analysis)=>renderClassicScatter(analysis);\n    const renderVectorField = (analysis)=>renderClassicScatter(analysis);\n    const renderHistogram3D = (analysis)=>renderBubbleScatter(analysis);\n    const renderBoxPlot3D = (analysis)=>renderBubbleScatter(analysis);\n    // 7. SURFACE AVEC CONTOURS - Basée sur les vraies données\n    const renderContourSurface = (analysis)=>{\n        const xValues = getValuesFromAnalysis(analysis, \"xAxis\");\n        const yValues = getValuesFromAnalysis(analysis, \"yAxis\");\n        const zValues = getValuesFromAnalysis(analysis, \"zAxis\");\n        const xRange = analysis.dataRanges[analysis.mapping.xAxis];\n        const yRange = analysis.dataRanges[analysis.mapping.yAxis];\n        if (!xRange || !yRange) {\n            renderClassicScatter(analysis);\n            return;\n        }\n        // Adapter la résolution selon la densité des données\n        const size = Math.min(30, Math.max(15, Math.sqrt(data.length)));\n        const xMin = xRange.min;\n        const xMax = xRange.max;\n        const yMin = yRange.min;\n        const yMax = yRange.max;\n        const xGrid = Array.from({\n            length: size\n        }, (_, i)=>xMin + i / (size - 1) * (xMax - xMin));\n        const yGrid = Array.from({\n            length: size\n        }, (_, i)=>yMin + i / (size - 1) * (yMax - yMin));\n        const surface = [];\n        for(let i = 0; i < size; i++){\n            const row = [];\n            for(let j = 0; j < size; j++){\n                const targetX = xGrid[j];\n                const targetY = yGrid[i];\n                // Interpolation pondérée par la distance\n                let weightedSum = 0;\n                let totalWeight = 0;\n                const maxDistance = Math.sqrt((xMax - xMin) ** 2 + (yMax - yMin) ** 2) / 5;\n                for(let k = 0; k < data.length; k++){\n                    const dx = xValues[k] - targetX;\n                    const dy = yValues[k] - targetY;\n                    const distance = Math.sqrt(dx * dx + dy * dy);\n                    if (distance < maxDistance) {\n                        const weight = Math.exp(-(distance * distance) / (maxDistance * maxDistance));\n                        weightedSum += zValues[k] * weight;\n                        totalWeight += weight;\n                    }\n                }\n                row.push(totalWeight > 0 ? weightedSum / totalWeight : 0);\n            }\n            surface.push(row);\n        }\n        const plotData = [\n            {\n                type: \"surface\",\n                z: surface,\n                x: xGrid,\n                y: yGrid,\n                colorscale: \"Earth\",\n                contours: {\n                    z: {\n                        show: true,\n                        usecolormap: true,\n                        highlightcolor: \"#42f462\",\n                        project: {\n                            z: true\n                        },\n                        width: 2\n                    }\n                },\n                colorbar: {\n                    title: analysis.mapping.zAxis,\n                    titlefont: {\n                        size: 10\n                    }\n                },\n                name: \"Surface - \".concat(data.length, \" points source\")\n            }\n        ];\n        const layout = createDynamicLayout(\"Surface 3D - Lignes de Niveau\", analysis);\n        window.Plotly.newPlot(plotRef.current, plotData, layout, getPlotConfig());\n    };\n    // 8. HÉLICE ADN - Basée sur les séquences de données\n    const renderDNAHelix = (analysis)=>{\n        const colorValues = getValuesFromAnalysis(analysis, \"colorBy\");\n        const sizeValues = getValuesFromAnalysis(analysis, \"sizeBy\");\n        const dnaX1 = [];\n        const dnaY1 = [];\n        const dnaZ1 = [];\n        const dnaX2 = [];\n        const dnaY2 = [];\n        const dnaZ2 = [];\n        const dnaColors = [];\n        const dnaSizes = [];\n        // Utiliser les vraies données pour moduler l'hélice\n        const colorRange = analysis.dataRanges[analysis.mapping.colorBy];\n        const sizeRange = analysis.dataRanges[analysis.mapping.sizeBy];\n        data.forEach((row, i)=>{\n            const t = i / data.length * 8 * Math.PI;\n            const z = i / data.length * 4;\n            // Modulation basée sur les données\n            const colorVal = colorValues[i];\n            const sizeVal = sizeValues[i];\n            const radiusModulation = colorRange ? 1 + 0.3 * (colorVal - colorRange.min) / (colorRange.max - colorRange.min) : 1;\n            const heightModulation = sizeRange ? 0.1 * (sizeVal - sizeRange.min) / (sizeRange.max - sizeRange.min) : 0;\n            // Premier brin\n            dnaX1.push(Math.cos(t) * radiusModulation);\n            dnaY1.push(Math.sin(t) * radiusModulation);\n            dnaZ1.push(z + heightModulation);\n            // Deuxième brin (décalé de π)\n            dnaX2.push(Math.cos(t + Math.PI) * radiusModulation);\n            dnaY2.push(Math.sin(t + Math.PI) * radiusModulation);\n            dnaZ2.push(z + heightModulation);\n            dnaColors.push(colorVal);\n            dnaSizes.push(Math.max(4, Math.min(10, sizeVal / ((sizeRange === null || sizeRange === void 0 ? void 0 : sizeRange.max) || 1) * 6 + 4)));\n        });\n        const plotData = [\n            {\n                type: \"scatter3d\",\n                mode: \"markers+lines\",\n                x: dnaX1,\n                y: dnaY1,\n                z: dnaZ1,\n                marker: {\n                    size: dnaSizes,\n                    color: dnaColors,\n                    colorscale: \"RdYlBu\",\n                    colorbar: {\n                        title: analysis.mapping.colorBy,\n                        titlefont: {\n                            size: 10\n                        }\n                    }\n                },\n                line: {\n                    color: \"rgba(255, 100, 100, 0.8)\",\n                    width: 4\n                },\n                name: \"Brin ADN 1 - \".concat(data.length, \" bases\")\n            },\n            {\n                type: \"scatter3d\",\n                mode: \"markers+lines\",\n                x: dnaX2,\n                y: dnaY2,\n                z: dnaZ2,\n                marker: {\n                    size: dnaSizes,\n                    color: dnaColors,\n                    colorscale: \"RdYlBu\"\n                },\n                line: {\n                    color: \"rgba(100, 100, 255, 0.8)\",\n                    width: 4\n                },\n                name: \"Brin ADN 2 - \".concat(data.length, \" bases\"),\n                showlegend: false\n            }\n        ];\n        const layout = createDynamicLayout(\"Double H\\xe9lice ADN\", analysis);\n        layout.scene.camera = {\n            eye: {\n                x: 2,\n                y: 0,\n                z: 1\n            }\n        };\n        window.Plotly.newPlot(plotRef.current, plotData, layout, getPlotConfig());\n    };\n    // Fonction pour créer un layout dynamique basé sur l'analyse\n    const createDynamicLayout = (title, analysis)=>{\n        const dataInfo = \"\".concat(data.length, \" entr\\xe9es • \").concat(analysis.numericColumns.length, \" num. • \").concat(analysis.categoricalColumns.length, \" cat.\");\n        return {\n            scene: {\n                xaxis: {\n                    title: {\n                        text: \"\".concat(analysis.mapping.xAxis, \" \").concat(analysis.dataTypes[analysis.mapping.xAxis] ? \"(\".concat(analysis.dataTypes[analysis.mapping.xAxis], \")\") : \"\"),\n                        font: {\n                            size: 12,\n                            color: \"#ea580c\"\n                        }\n                    },\n                    showbackground: true,\n                    backgroundcolor: \"rgba(240, 240, 240, 0.8)\"\n                },\n                yaxis: {\n                    title: {\n                        text: \"\".concat(analysis.mapping.yAxis, \" \").concat(analysis.dataTypes[analysis.mapping.yAxis] ? \"(\".concat(analysis.dataTypes[analysis.mapping.yAxis], \")\") : \"\"),\n                        font: {\n                            size: 12,\n                            color: \"#ea580c\"\n                        }\n                    },\n                    showbackground: true,\n                    backgroundcolor: \"rgba(240, 240, 240, 0.8)\"\n                },\n                zaxis: {\n                    title: {\n                        text: \"\".concat(analysis.mapping.zAxis, \" \").concat(analysis.dataTypes[analysis.mapping.zAxis] ? \"(\".concat(analysis.dataTypes[analysis.mapping.zAxis], \")\") : \"\"),\n                        font: {\n                            size: 12,\n                            color: \"#ea580c\"\n                        }\n                    },\n                    showbackground: true,\n                    backgroundcolor: \"rgba(240, 240, 240, 0.8)\"\n                },\n                camera: {\n                    eye: {\n                        x: 1.25,\n                        y: 1.25,\n                        z: 1.25\n                    }\n                }\n            },\n            title: {\n                text: title,\n                font: {\n                    size: 18,\n                    color: \"#ea580c\"\n                }\n            },\n            paper_bgcolor: \"rgba(0,0,0,0)\",\n            margin: {\n                l: 0,\n                r: 0,\n                t: 60,\n                b: 0\n            },\n            annotations: [\n                {\n                    text: \"<b>Mod\\xe8le:</b> \".concat(title, \"<br><b>Donn\\xe9es:</b> \").concat(dataInfo, \"<br><b>Mapping:</b><br>• X: \").concat(analysis.mapping.xAxis, \"<br>• Y: \").concat(analysis.mapping.yAxis, \"<br>• Z: \").concat(analysis.mapping.zAxis, \"<br>• Couleur: \").concat(analysis.mapping.colorBy, \"<br>• Taille: \").concat(analysis.mapping.sizeBy).concat(analysis.mapping.categoryBy ? \"<br>• Cat\\xe9gorie: \".concat(analysis.mapping.categoryBy) : \"\"),\n                    showarrow: false,\n                    xref: \"paper\",\n                    yref: \"paper\",\n                    x: -0.15,\n                    y: 0.95,\n                    xanchor: \"left\",\n                    yanchor: \"top\",\n                    bgcolor: \"rgba(255, 255, 255, 0.8)\",\n                    bordercolor: \"rgba(234, 88, 12, 0.3)\",\n                    borderwidth: 1,\n                    font: {\n                        size: 8,\n                        color: \"#666\"\n                    }\n                }\n            ]\n        };\n    };\n    const getPlotConfig = ()=>({\n            responsive: true,\n            displayModeBar: false,\n            staticPlot: false,\n            scrollZoom: true,\n            doubleClick: \"reset\"\n        });\n    // renderV0Visualization est maintenant défini au début du composant\n    const renderDemoVisualization = ()=>{\n        const demoData = Array.from({\n            length: 50\n        }, (_, i)=>({\n                x: Math.random() * 10,\n                y: Math.random() * 10,\n                z: Math.random() * 10,\n                value: Math.random() * 100,\n                category: \"Cat\".concat(Math.floor(Math.random() * 5) + 1)\n            }));\n        setDataMapping({\n            xAxis: \"Dimension X\",\n            yAxis: \"Dimension Y\",\n            zAxis: \"Dimension Z\",\n            colorBy: \"Valeur\",\n            sizeBy: \"Valeur\"\n        });\n        const plotData = [\n            {\n                type: \"scatter3d\",\n                mode: \"markers\",\n                x: demoData.map((d)=>d.x),\n                y: demoData.map((d)=>d.y),\n                z: demoData.map((d)=>d.z),\n                marker: {\n                    size: 8,\n                    color: demoData.map((d)=>d.value),\n                    colorscale: \"Rainbow\",\n                    opacity: 0.8\n                },\n                name: \"D\\xe9monstration\"\n            }\n        ];\n        const layout = {\n            scene: {\n                xaxis: {\n                    title: \"Dimension X\",\n                    showbackground: true,\n                    backgroundcolor: \"rgba(240, 240, 240, 0.8)\"\n                },\n                yaxis: {\n                    title: \"Dimension Y\",\n                    showbackground: true,\n                    backgroundcolor: \"rgba(240, 240, 240, 0.8)\"\n                },\n                zaxis: {\n                    title: \"Dimension Z\",\n                    showbackground: true,\n                    backgroundcolor: \"rgba(240, 240, 240, 0.8)\"\n                },\n                camera: {\n                    eye: {\n                        x: 1.25,\n                        y: 1.25,\n                        z: 1.25\n                    }\n                }\n            },\n            title: {\n                text: \"D\\xe9monstration - \".concat(getModelName(visualizationType)),\n                font: {\n                    size: 18,\n                    color: \"#ea580c\"\n                }\n            },\n            paper_bgcolor: \"rgba(0,0,0,0)\",\n            margin: {\n                l: 0,\n                r: 0,\n                t: 60,\n                b: 0\n            }\n        };\n        window.Plotly.newPlot(plotRef.current, plotData, layout, getPlotConfig());\n    };\n    const getModelName = (modelId)=>{\n        const names = {\n            scatter3d: \"Nuage 3D Classique\",\n            scatter_density: \"Densit\\xe9 3D\",\n            scatter_bubble: \"Bulles 3D\",\n            mandala_3d: \"Mandala 3D\",\n            galaxy_3d: \"Galaxie 3D\",\n            surface_contour: \"Surface Contours\",\n            dna_helix: \"H\\xe9lice ADN\",\n            timeline_3d: \"Timeline 3D\"\n        };\n        return names[modelId] || \"Visualisation 3D\";\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"h-full bg-gradient-to-br from-orange-50 to-white rounded-xl border-2 border-orange-200 overflow-hidden\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"p-6 border-b border-orange-200 bg-white\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex items-center justify-between\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex items-center space-x-3\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"w-12 h-12 bg-gradient-to-br from-orange-600 to-orange-500 rounded-xl flex items-center justify-center\",\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Code_TrendingUp_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                                        className: \"w-6 h-6 text-white\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                        lineNumber: 1158,\n                                        columnNumber: 15\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                    lineNumber: 1157,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                            className: \"text-xl font-bold text-gray-800\",\n                                            children: \"Canvas IA • Visualisation Dynamique\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                            lineNumber: 1161,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                            className: \"text-sm text-gray-600\",\n                                            children: data.length > 0 ? \"\".concat(data.length, \" \\xe9chantillons • \").concat(columns.length, \" variables • \").concat(getModelName(currentModel)) : \"Mode d\\xe9monstration • \".concat(getModelName(currentModel))\n                                        }, void 0, false, {\n                                            fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                            lineNumber: 1162,\n                                            columnNumber: 15\n                                        }, this),\n                                        dataAnalysis && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                            className: \"text-xs text-gray-500\",\n                                            children: [\n                                                dataAnalysis.numericColumns.length,\n                                                \" num\\xe9riques • \",\n                                                dataAnalysis.categoricalColumns.length,\n                                                \" \",\n                                                \"cat\\xe9gorielles • \",\n                                                dataAnalysis.temporalColumns.length,\n                                                \" temporelles\"\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                            lineNumber: 1168,\n                                            columnNumber: 17\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                    lineNumber: 1160,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                            lineNumber: 1156,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex items-center space-x-2\",\n                            children: [\n                                isV0Generated && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    className: \"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Code_TrendingUp_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                            className: \"w-3 h-3 mr-1\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                            lineNumber: 1179,\n                                            columnNumber: 17\n                                        }, this),\n                                        \"G\\xe9n\\xe9r\\xe9 par v0\"\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                    lineNumber: 1178,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    className: \"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Code_TrendingUp_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                                            className: \"w-3 h-3 mr-1\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                            lineNumber: 1184,\n                                            columnNumber: 15\n                                        }, this),\n                                        \"Plotly v2.35\"\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                    lineNumber: 1183,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    className: \"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800\",\n                                    children: \"Adaptatif Dynamique\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                    lineNumber: 1187,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                            lineNumber: 1176,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                    lineNumber: 1155,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                lineNumber: 1154,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"relative h-[calc(100%-120px)]\",\n                children: !plotlyLoaded ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex items-center justify-center h-full\",\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"text-center\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"w-8 h-8 border-2 border-orange-500 border-t-transparent rounded-full animate-spin mx-auto mb-4\"\n                            }, void 0, false, {\n                                fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                lineNumber: 1199,\n                                columnNumber: 15\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                className: \"text-gray-600\",\n                                children: \"Chargement de Plotly.js v2.35...\"\n                            }, void 0, false, {\n                                fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                lineNumber: 1200,\n                                columnNumber: 15\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                className: \"text-sm text-gray-500 mt-2\",\n                                children: \"Analyse dynamique des donn\\xe9es en cours...\"\n                            }, void 0, false, {\n                                fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                lineNumber: 1201,\n                                columnNumber: 15\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                        lineNumber: 1198,\n                        columnNumber: 13\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                    lineNumber: 1197,\n                    columnNumber: 11\n                }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    ref: plotRef,\n                    className: \"w-full h-full\"\n                }, void 0, false, {\n                    fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                    lineNumber: 1205,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                lineNumber: 1195,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n        lineNumber: 1152,\n        columnNumber: 5\n    }, this);\n}\n_s(Canvas3DVisualization, \"eO0E6itovXilb3IAoe61XKZZfX8=\");\n_c = Canvas3DVisualization;\nvar _c;\n$RefreshReg$(_c, \"Canvas3DVisualization\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2NvbXBvbmVudHMvQ2FudmFzM0RWaXN1YWxpemF0aW9uLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFFbUQ7QUFDQztBQW1DckMsU0FBU00sc0JBQXNCLEtBS2pCO1FBTGlCLEVBQzVDQyxJQUFJLEVBQ0pDLE9BQU8sRUFDUEMsaUJBQWlCLEVBQ2pCQyxlQUFlLEVBQ1ksR0FMaUI7O0lBTTVDLE1BQU1DLFVBQVVWLDZDQUFNQSxDQUFpQjtJQUN2QyxNQUFNLENBQUNXLGVBQWVDLGlCQUFpQixHQUFHWCwrQ0FBUUEsQ0FBQztJQUNuRCxNQUFNLENBQUNZLGNBQWNDLGdCQUFnQixHQUFHYiwrQ0FBUUEsQ0FBQztJQUNqRCxNQUFNLENBQUNjLGFBQWFDLGVBQWUsR0FBR2YsK0NBQVFBLENBQXFCO0lBQ25FLE1BQU0sQ0FBQ2dCLGNBQWNDLGdCQUFnQixHQUFHakIsK0NBQVFBLENBQVM7SUFDekQsTUFBTSxDQUFDa0IsY0FBY0MsZ0JBQWdCLEdBQUduQiwrQ0FBUUEsQ0FBc0I7SUFFdEUseURBQXlEO0lBQ3pELE1BQU1vQix3QkFBd0IsT0FBT0M7UUFDbkMsTUFBTUMsY0FBY2IsUUFBUWMsT0FBTztRQUNuQyxJQUFJLENBQUNELGFBQWE7UUFFbEIsSUFBSTtZQUNGLDhDQUE4QztZQUM5QyxJQUFJRCxPQUFPRyxRQUFRLElBQUlILE9BQU9JLE1BQU0sRUFBRTtnQkFDcEMsTUFBTUMsT0FBT0MsTUFBTSxDQUFDQyxPQUFPLENBQUNOLGFBQWFELE9BQU9HLFFBQVEsRUFBRUgsT0FBT0ksTUFBTSxFQUFFSTtZQUMzRSxPQUFPO2dCQUNMLDJDQUEyQztnQkFDM0MsTUFBTUMsV0FBV0M7Z0JBQ2pCLElBQUksQ0FBQ0QsVUFBVTtnQkFDZkU7WUFDRjtRQUNGLEVBQUUsT0FBT0MsT0FBTztZQUNkQyxRQUFRRCxLQUFLLENBQUMsNEJBQTRCQTtZQUMxQyxNQUFNSCxXQUFXQztZQUNqQixJQUFJLENBQUNELFVBQVU7WUFDZksscUJB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cUksV0FBVTswQ0FBZ0I7Ozs7OzswQ0FDN0IsOERBQUNySTtnQ0FBRXFJLFdBQVU7MENBQTZCOzs7Ozs7Ozs7Ozs7Ozs7O3lDQUk5Qyw4REFBQ0Q7b0JBQUlJLEtBQUs3UztvQkFBUzBTLFdBQVU7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBS3ZDO0dBbnBDd0IvUztLQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9jb21wb25lbnRzL0NhbnZhczNEVmlzdWFsaXphdGlvbi50c3g/ZGM1MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIlxuXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgVHJlbmRpbmdVcCwgWmFwLCBDb2RlIH0gZnJvbSBcImx1Y2lkZS1yZWFjdFwiXG5cbi8vIMOJdGVuZHJlIGwnaW50ZXJmYWNlIFdpbmRvdyBwb3VyIGluY2x1cmUgUGxvdGx5XG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBXaW5kb3cge1xuICAgIFBsb3RseTogYW55XG4gIH1cbn1cblxuaW50ZXJmYWNlIENhbnZhczNEVmlzdWFsaXphdGlvblByb3BzIHtcbiAgZGF0YTogYW55W11cbiAgY29sdW1uczogc3RyaW5nW11cbiAgdmlzdWFsaXphdGlvblR5cGU6IHN0cmluZ1xuICBnZW5lcmF0ZWRDb25maWc/OiBhbnlcbn1cblxuaW50ZXJmYWNlIERhdGFNYXBwaW5nIHtcbiAgeEF4aXM6IHN0cmluZ1xuICB5QXhpczogc3RyaW5nXG4gIHpBeGlzOiBzdHJpbmdcbiAgY29sb3JCeTogc3RyaW5nXG4gIHNpemVCeTogc3RyaW5nXG4gIGNhdGVnb3J5Qnk/OiBzdHJpbmdcbn1cblxuaW50ZXJmYWNlIERhdGFBbmFseXNpcyB7XG4gIG1hcHBpbmc6IERhdGFNYXBwaW5nXG4gIG51bWVyaWNDb2x1bW5zOiBzdHJpbmdbXVxuICBjYXRlZ29yaWNhbENvbHVtbnM6IHN0cmluZ1tdXG4gIHRlbXBvcmFsQ29sdW1uczogc3RyaW5nW11cbiAgZGF0YVJhbmdlczogeyBba2V5OiBzdHJpbmddOiB7IG1pbjogbnVtYmVyOyBtYXg6IG51bWJlcjsgdmFsdWVzOiBudW1iZXJbXSB9IH1cbiAgY2F0ZWdvcmllczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmdbXSB9XG4gIGRhdGFUeXBlczogeyBba2V5OiBzdHJpbmddOiBcIm51bWVyaWNcIiB8IFwiY2F0ZWdvcmljYWxcIiB8IFwidGVtcG9yYWxcIiB8IFwibWl4ZWRcIiB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENhbnZhczNEVmlzdWFsaXphdGlvbih7XG4gIGRhdGEsXG4gIGNvbHVtbnMsXG4gIHZpc3VhbGl6YXRpb25UeXBlLFxuICBnZW5lcmF0ZWRDb25maWcsXG59OiBDYW52YXMzRFZpc3VhbGl6YXRpb25Qcm9wcykge1xuICBjb25zdCBwbG90UmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKVxuICBjb25zdCBbaXNWMEdlbmVyYXRlZCwgc2V0SXNWMEdlbmVyYXRlZF0gPSB1c2VTdGF0ZShmYWxzZSlcbiAgY29uc3QgW3Bsb3RseUxvYWRlZCwgc2V0UGxvdGx5TG9hZGVkXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBbZGF0YU1hcHBpbmcsIHNldERhdGFNYXBwaW5nXSA9IHVzZVN0YXRlPERhdGFNYXBwaW5nIHwgbnVsbD4obnVsbClcbiAgY29uc3QgW2N1cnJlbnRNb2RlbCwgc2V0Q3VycmVudE1vZGVsXSA9IHVzZVN0YXRlPHN0cmluZz4oXCJzY2F0dGVyM2RcIilcbiAgY29uc3QgW2RhdGFBbmFseXNpcywgc2V0RGF0YUFuYWx5c2lzXSA9IHVzZVN0YXRlPERhdGFBbmFseXNpcyB8IG51bGw+KG51bGwpXG5cbiAgLy8gRm9uY3Rpb24gcG91ciBnw6lyZXIgbGEgdmlzdWFsaXNhdGlvbiBnw6luw6lyw6llIHBhciBsJ0FQSVxuICBjb25zdCByZW5kZXJWMFZpc3VhbGl6YXRpb24gPSBhc3luYyAoY29uZmlnOiBhbnkpID0+IHtcbiAgICBjb25zdCBwbG90RWxlbWVudCA9IHBsb3RSZWYuY3VycmVudFxuICAgIGlmICghcGxvdEVsZW1lbnQpIHJldHVyblxuXG4gICAgdHJ5IHtcbiAgICAgIC8vIFV0aWxpc2VyIGxhIGNvbmZpZ3VyYXRpb24gZ8OpbsOpcsOpZSBwYXIgbCdBUElcbiAgICAgIGlmIChjb25maWcucGxvdERhdGEgJiYgY29uZmlnLmxheW91dCkge1xuICAgICAgICBhd2FpdCB3aW5kb3cuUGxvdGx5Lm5ld1Bsb3QocGxvdEVsZW1lbnQsIGNvbmZpZy5wbG90RGF0YSwgY29uZmlnLmxheW91dCwgZ2V0UGxvdENvbmZpZygpKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRmFsbGJhY2sgc3VyIGxhIGNvbmZpZ3VyYXRpb24gcGFyIGTDqWZhdXRcbiAgICAgICAgY29uc3QgYW5hbHlzaXMgPSBhbmFseXplRGF0YUludGVsbGlnZW50bHkoKVxuICAgICAgICBpZiAoIWFuYWx5c2lzKSByZXR1cm5cbiAgICAgICAgcmVuZGVyTW9kZWxTcGVjaWZpY1Zpc3VhbGl6YXRpb24oKVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyZXVyIGxvcnMgZHUgcmVuZHUgVjA6XCIsIGVycm9yKVxuICAgICAgY29uc3QgYW5hbHlzaXMgPSBhbmFseXplRGF0YUludGVsbGlnZW50bHkoKVxuICAgICAgaWYgKCFhbmFseXNpcykgcmV0dXJuXG4gICAgICByZW5kZXJDbGFzc2ljU2NhdHRlcihhbmFseXNpcylcbiAgICB9XG4gIH1cblxuICAvLyBDaGFyZ2VyIFBsb3RseS5qc1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmICF3aW5kb3cuUGxvdGx5KSB7XG4gICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpXG4gICAgICBzY3JpcHQuc3JjID0gXCJodHRwczovL2Nkbi5wbG90Lmx5L3Bsb3RseS0yLjM1LjIubWluLmpzXCJcbiAgICAgIHNjcmlwdC5vbmxvYWQgPSAoKSA9PiBzZXRQbG90bHlMb2FkZWQodHJ1ZSlcbiAgICAgIHNjcmlwdC5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyZXVyIGxvcnMgZHUgY2hhcmdlbWVudCBkZSBQbG90bHkuanNcIilcbiAgICAgICAgc2V0UGxvdGx5TG9hZGVkKGZhbHNlKVxuICAgICAgfVxuICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpXG4gICAgfSBlbHNlIGlmICh3aW5kb3cuUGxvdGx5KSB7XG4gICAgICBzZXRQbG90bHlMb2FkZWQodHJ1ZSlcbiAgICB9XG4gIH0sIFtdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFwbG90bHlMb2FkZWQgfHwgIXBsb3RSZWYuY3VycmVudCkgcmV0dXJuXG5cbiAgICBjb25zdCB1cGRhdGVWaXN1YWxpemF0aW9uID0gYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcGxvdEVsZW1lbnQgPSBwbG90UmVmLmN1cnJlbnRcbiAgICAgIGlmICghcGxvdEVsZW1lbnQpIHJldHVyblxuXG4gICAgICAvLyBOZXR0b3llciBsZSBncmFwaGlxdWUgcHLDqWPDqWRlbnRcbiAgICAgIGlmIChwbG90RWxlbWVudC5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIHdpbmRvdy5QbG90bHkucHVyZ2UocGxvdEVsZW1lbnQpXG4gICAgICB9XG5cbiAgICAgIHNldEN1cnJlbnRNb2RlbCh2aXN1YWxpemF0aW9uVHlwZSlcblxuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGdlbmVyYXRlZENvbmZpZykge1xuICAgICAgICAgIGF3YWl0IHJlbmRlclYwVmlzdWFsaXphdGlvbihnZW5lcmF0ZWRDb25maWcpXG4gICAgICAgICAgc2V0SXNWMEdlbmVyYXRlZCh0cnVlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGF3YWl0IHJlbmRlck1vZGVsU3BlY2lmaWNWaXN1YWxpemF0aW9uKClcbiAgICAgICAgICBzZXRJc1YwR2VuZXJhdGVkKGZhbHNlKVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyZXVyIGxvcnMgZGUgbGEgbWlzZSDDoCBqb3VyIGRlIGxhIHZpc3VhbGlzYXRpb246XCIsIGVycm9yKVxuICAgICAgICAvLyBFbiBjYXMgZCdlcnJldXIsIG9uIHJldmllbnQgYXUgbnVhZ2UgZGUgcG9pbnRzIGJhc2lxdWVcbiAgICAgICAgcmVuZGVyQ2xhc3NpY1NjYXR0ZXIoYW5hbHl6ZURhdGFJbnRlbGxpZ2VudGx5KCkgfHwge1xuICAgICAgICAgIG1hcHBpbmc6IHtcbiAgICAgICAgICAgIHhBeGlzOiBjb2x1bW5zWzBdIHx8IFwiaW5kZXhcIixcbiAgICAgICAgICAgIHlBeGlzOiBjb2x1bW5zWzFdIHx8IFwiaW5kZXhcIixcbiAgICAgICAgICAgIHpBeGlzOiBjb2x1bW5zWzJdIHx8IFwiaW5kZXhcIixcbiAgICAgICAgICAgIGNvbG9yQnk6IGNvbHVtbnNbMF0gfHwgXCJpbmRleFwiLFxuICAgICAgICAgICAgc2l6ZUJ5OiBjb2x1bW5zWzFdIHx8IFwiaW5kZXhcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgbnVtZXJpY0NvbHVtbnM6IGNvbHVtbnMsXG4gICAgICAgICAgY2F0ZWdvcmljYWxDb2x1bW5zOiBbXSxcbiAgICAgICAgICB0ZW1wb3JhbENvbHVtbnM6IFtdLFxuICAgICAgICAgIGRhdGFSYW5nZXM6IHt9LFxuICAgICAgICAgIGNhdGVnb3JpZXM6IHt9LFxuICAgICAgICAgIGRhdGFUeXBlczoge31cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVWaXN1YWxpemF0aW9uKClcbiAgfSwgW3Bsb3RseUxvYWRlZCwgZGF0YSwgY29sdW1ucywgdmlzdWFsaXphdGlvblR5cGUsIGdlbmVyYXRlZENvbmZpZ10pXG5cbiAgLy8gQW5hbHlzZSBjb21wbMOodGUgZXQgaW50ZWxsaWdlbnRlIGRlcyBkb25uw6llc1xuICBjb25zdCBhbmFseXplRGF0YUludGVsbGlnZW50bHkgPSAoKTogRGF0YUFuYWx5c2lzIHwgbnVsbCA9PiB7XG4gICAgaWYgKCFkYXRhIHx8IGRhdGEubGVuZ3RoID09PSAwIHx8ICFjb2x1bW5zIHx8IGNvbHVtbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IGFuYWx5c2lzOiBEYXRhQW5hbHlzaXMgPSB7XG4gICAgICBtYXBwaW5nOiB7fSBhcyBEYXRhTWFwcGluZyxcbiAgICAgIG51bWVyaWNDb2x1bW5zOiBbXSxcbiAgICAgIGNhdGVnb3JpY2FsQ29sdW1uczogW10sXG4gICAgICB0ZW1wb3JhbENvbHVtbnM6IFtdLFxuICAgICAgZGF0YVJhbmdlczoge30sXG4gICAgICBjYXRlZ29yaWVzOiB7fSxcbiAgICAgIGRhdGFUeXBlczoge30sXG4gICAgfVxuXG4gICAgLy8gQW5hbHlzZXIgY2hhcXVlIGNvbG9ubmUgZW4gZMOpdGFpbFxuICAgIGNvbHVtbnMuZm9yRWFjaCgoY29sKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZXMgPSBkYXRhLm1hcCgocm93KSA9PiByb3dbY29sXSkuZmlsdGVyKCh2YWwpID0+IHZhbCAhPSBudWxsICYmIHZhbCAhPT0gXCJcIilcblxuICAgICAgaWYgKHZhbHVlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgYW5hbHlzaXMuZGF0YVR5cGVzW2NvbF0gPSBcIm1peGVkXCJcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIC8vIFRlc3QgbnVtw6lyaXF1ZVxuICAgICAgY29uc3QgbnVtZXJpY1ZhbHVlcyA9IHZhbHVlcy5tYXAoKHZhbCkgPT4gTnVtYmVyLnBhcnNlRmxvYXQodmFsKSkuZmlsdGVyKCh2YWwpID0+ICFpc05hTih2YWwpICYmIGlzRmluaXRlKHZhbCkpXG4gICAgICBjb25zdCBudW1lcmljUmF0aW8gPSBudW1lcmljVmFsdWVzLmxlbmd0aCAvIHZhbHVlcy5sZW5ndGhcblxuICAgICAgLy8gVGVzdCB0ZW1wb3JlbFxuICAgICAgY29uc3QgZGF0ZVZhbHVlcyA9IHZhbHVlcy5maWx0ZXIoKHZhbCkgPT4ge1xuICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUodmFsKVxuICAgICAgICByZXR1cm4gIWlzTmFOKGRhdGUuZ2V0VGltZSgpKSAmJiBkYXRlLmdldEZ1bGxZZWFyKCkgPiAxOTAwICYmIGRhdGUuZ2V0RnVsbFllYXIoKSA8IDIxMDBcbiAgICAgIH0pXG4gICAgICBjb25zdCB0ZW1wb3JhbFJhdGlvID0gZGF0ZVZhbHVlcy5sZW5ndGggLyB2YWx1ZXMubGVuZ3RoXG5cbiAgICAgIC8vIFRlc3QgY2F0w6lnb3JpZWxcbiAgICAgIGNvbnN0IHVuaXF1ZVZhbHVlcyA9IFsuLi5uZXcgU2V0KHZhbHVlcyldXG4gICAgICBjb25zdCB1bmlxdWVSYXRpbyA9IHVuaXF1ZVZhbHVlcy5sZW5ndGggLyB2YWx1ZXMubGVuZ3RoXG5cbiAgICAgIC8vIENsYXNzaWZpY2F0aW9uIGludGVsbGlnZW50ZVxuICAgICAgaWYgKHRlbXBvcmFsUmF0aW8gPiAwLjcpIHtcbiAgICAgICAgYW5hbHlzaXMuZGF0YVR5cGVzW2NvbF0gPSBcInRlbXBvcmFsXCJcbiAgICAgICAgYW5hbHlzaXMudGVtcG9yYWxDb2x1bW5zLnB1c2goY29sKVxuICAgICAgICAvLyBDb252ZXJ0aXIgZW4gdGltZXN0YW1wcyBwb3VyIGxlcyBjYWxjdWxzXG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcHMgPSBkYXRlVmFsdWVzLm1hcCgodmFsKSA9PiBuZXcgRGF0ZSh2YWwpLmdldFRpbWUoKSlcbiAgICAgICAgYW5hbHlzaXMuZGF0YVJhbmdlc1tjb2xdID0ge1xuICAgICAgICAgIG1pbjogTWF0aC5taW4oLi4udGltZXN0YW1wcyksXG4gICAgICAgICAgbWF4OiBNYXRoLm1heCguLi50aW1lc3RhbXBzKSxcbiAgICAgICAgICB2YWx1ZXM6IHRpbWVzdGFtcHMsXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobnVtZXJpY1JhdGlvID4gMC43KSB7XG4gICAgICAgIGFuYWx5c2lzLmRhdGFUeXBlc1tjb2xdID0gXCJudW1lcmljXCJcbiAgICAgICAgYW5hbHlzaXMubnVtZXJpY0NvbHVtbnMucHVzaChjb2wpXG4gICAgICAgIGFuYWx5c2lzLmRhdGFSYW5nZXNbY29sXSA9IHtcbiAgICAgICAgICBtaW46IE1hdGgubWluKC4uLm51bWVyaWNWYWx1ZXMpLFxuICAgICAgICAgIG1heDogTWF0aC5tYXgoLi4ubnVtZXJpY1ZhbHVlcyksXG4gICAgICAgICAgdmFsdWVzOiBudW1lcmljVmFsdWVzLFxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHVuaXF1ZVJhdGlvIDwgMC4zIHx8IHVuaXF1ZVZhbHVlcy5sZW5ndGggPD0gMjApIHtcbiAgICAgICAgYW5hbHlzaXMuZGF0YVR5cGVzW2NvbF0gPSBcImNhdGVnb3JpY2FsXCJcbiAgICAgICAgYW5hbHlzaXMuY2F0ZWdvcmljYWxDb2x1bW5zLnB1c2goY29sKVxuICAgICAgICBhbmFseXNpcy5jYXRlZ29yaWVzW2NvbF0gPSB1bmlxdWVWYWx1ZXMuc2xpY2UoMCwgMjApIC8vIExpbWl0ZXIgw6AgMjAgY2F0w6lnb3JpZXNcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFuYWx5c2lzLmRhdGFUeXBlc1tjb2xdID0gXCJtaXhlZFwiXG4gICAgICAgIGlmIChudW1lcmljVmFsdWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBhbmFseXNpcy5kYXRhUmFuZ2VzW2NvbF0gPSB7XG4gICAgICAgICAgICBtaW46IE1hdGgubWluKC4uLm51bWVyaWNWYWx1ZXMpLFxuICAgICAgICAgICAgbWF4OiBNYXRoLm1heCguLi5udW1lcmljVmFsdWVzKSxcbiAgICAgICAgICAgIHZhbHVlczogbnVtZXJpY1ZhbHVlcyxcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLy8gQ3LDqWVyIHVuIG1hcHBpbmcgaW50ZWxsaWdlbnQgYmFzw6kgc3VyIGxlcyB0eXBlcyBkZSBkb25uw6llc1xuICAgIGNvbnN0IGFsbE51bWVyaWNDb2xzID0gWy4uLmFuYWx5c2lzLm51bWVyaWNDb2x1bW5zLCAuLi5hbmFseXNpcy50ZW1wb3JhbENvbHVtbnNdXG5cbiAgICBpZiAoYWxsTnVtZXJpY0NvbHMubGVuZ3RoID49IDMpIHtcbiAgICAgIGFuYWx5c2lzLm1hcHBpbmcgPSB7XG4gICAgICAgIHhBeGlzOiBhbGxOdW1lcmljQ29sc1swXSxcbiAgICAgICAgeUF4aXM6IGFsbE51bWVyaWNDb2xzWzFdLFxuICAgICAgICB6QXhpczogYWxsTnVtZXJpY0NvbHNbMl0sXG4gICAgICAgIGNvbG9yQnk6IGFsbE51bWVyaWNDb2xzWzBdLFxuICAgICAgICBzaXplQnk6IGFsbE51bWVyaWNDb2xzLmxlbmd0aCA+IDMgPyBhbGxOdW1lcmljQ29sc1szXSA6IGFsbE51bWVyaWNDb2xzWzBdLFxuICAgICAgICBjYXRlZ29yeUJ5OiBhbmFseXNpcy5jYXRlZ29yaWNhbENvbHVtbnNbMF0sXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhbGxOdW1lcmljQ29scy5sZW5ndGggPT09IDIpIHtcbiAgICAgIGFuYWx5c2lzLm1hcHBpbmcgPSB7XG4gICAgICAgIHhBeGlzOiBhbGxOdW1lcmljQ29sc1swXSxcbiAgICAgICAgeUF4aXM6IGFsbE51bWVyaWNDb2xzWzFdLFxuICAgICAgICB6QXhpczogYWxsTnVtZXJpY0NvbHNbMF0sXG4gICAgICAgIGNvbG9yQnk6IGFsbE51bWVyaWNDb2xzWzFdLFxuICAgICAgICBzaXplQnk6IGFsbE51bWVyaWNDb2xzWzBdLFxuICAgICAgICBjYXRlZ29yeUJ5OiBhbmFseXNpcy5jYXRlZ29yaWNhbENvbHVtbnNbMF0sXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhbGxOdW1lcmljQ29scy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGFuYWx5c2lzLm1hcHBpbmcgPSB7XG4gICAgICAgIHhBeGlzOiBhbGxOdW1lcmljQ29sc1swXSxcbiAgICAgICAgeUF4aXM6IFwiaW5kZXhcIixcbiAgICAgICAgekF4aXM6IGFsbE51bWVyaWNDb2xzWzBdLFxuICAgICAgICBjb2xvckJ5OiBhbGxOdW1lcmljQ29sc1swXSxcbiAgICAgICAgc2l6ZUJ5OiBhbGxOdW1lcmljQ29sc1swXSxcbiAgICAgICAgY2F0ZWdvcnlCeTogYW5hbHlzaXMuY2F0ZWdvcmljYWxDb2x1bW5zWzBdLFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBVdGlsaXNlciBsZXMgaW5kaWNlcyBldCBjYXTDqWdvcmllc1xuICAgICAgYW5hbHlzaXMubWFwcGluZyA9IHtcbiAgICAgICAgeEF4aXM6IFwiaW5kZXhcIixcbiAgICAgICAgeUF4aXM6IGFuYWx5c2lzLmNhdGVnb3JpY2FsQ29sdW1uc1swXSB8fCBcImluZGV4XCIsXG4gICAgICAgIHpBeGlzOiBcImNvdW50XCIsXG4gICAgICAgIGNvbG9yQnk6IGFuYWx5c2lzLmNhdGVnb3JpY2FsQ29sdW1uc1swXSB8fCBcImluZGV4XCIsXG4gICAgICAgIHNpemVCeTogXCJjb3VudFwiLFxuICAgICAgICBjYXRlZ29yeUJ5OiBhbmFseXNpcy5jYXRlZ29yaWNhbENvbHVtbnNbMF0sXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFuYWx5c2lzXG4gIH1cblxuICAvLyBGb25jdGlvbiBwcmluY2lwYWxlIHF1aSByb3V0ZSB2ZXJzIGxhIGJvbm5lIHZpc3VhbGlzYXRpb24gc2Vsb24gbGUgbW9kw6hsZVxuICBjb25zdCByZW5kZXJNb2RlbFNwZWNpZmljVmlzdWFsaXphdGlvbiA9ICgpID0+IHtcbiAgICBpZiAoIWRhdGEgfHwgZGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJlbmRlckRlbW9WaXN1YWxpemF0aW9uKClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGFuYWx5c2lzID0gYW5hbHl6ZURhdGFJbnRlbGxpZ2VudGx5KClcbiAgICBpZiAoIWFuYWx5c2lzKSB7XG4gICAgICByZW5kZXJEZW1vVmlzdWFsaXphdGlvbigpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBzZXREYXRhQW5hbHlzaXMoYW5hbHlzaXMpXG4gICAgc2V0RGF0YU1hcHBpbmcoYW5hbHlzaXMubWFwcGluZylcblxuICAgIC8vIFJvdXRlciB2ZXJzIGxhIGZvbmN0aW9uIHNww6ljaWFsaXPDqWUgc2Vsb24gbGUgbW9kw6hsZSBleGFjdFxuICAgIHN3aXRjaCAodmlzdWFsaXphdGlvblR5cGUpIHtcbiAgICAgIC8vIE5VQUdFU1xuICAgICAgY2FzZSBcInNjYXR0ZXIzZFwiOlxuICAgICAgICByZW5kZXJDbGFzc2ljU2NhdHRlcihhbmFseXNpcylcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgXCJzY2F0dGVyX2J1YmJsZVwiOlxuICAgICAgICByZW5kZXJCdWJibGVTY2F0dGVyKGFuYWx5c2lzKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBcInNjYXR0ZXJfYW5pbWF0ZWRcIjpcbiAgICAgICAgcmVuZGVyQW5pbWF0ZWRTY2F0dGVyKGFuYWx5c2lzKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBcInNjYXR0ZXJfY2x1c3RlcmVkXCI6XG4gICAgICAgIHJlbmRlckNsdXN0ZXJlZFNjYXR0ZXIoYW5hbHlzaXMpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIFwic2NhdHRlcl9kZW5zaXR5XCI6XG4gICAgICAgIHJlbmRlckRlbnNpdHlTY2F0dGVyKGFuYWx5c2lzKVxuICAgICAgICBicmVha1xuXG4gICAgICAvLyBTVVJGQUNFU1xuICAgICAgY2FzZSBcInN1cmZhY2UzZFwiOlxuICAgICAgICByZW5kZXJDbGFzc2ljU3VyZmFjZShhbmFseXNpcylcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgXCJzdXJmYWNlX2NvbnRvdXJcIjpcbiAgICAgICAgcmVuZGVyQ29udG91clN1cmZhY2UoYW5hbHlzaXMpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIFwic3VyZmFjZV9tZXNoXCI6XG4gICAgICAgIHJlbmRlck1lc2hTdXJmYWNlKGFuYWx5c2lzKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBcInN1cmZhY2VfZ3JhZGllbnRcIjpcbiAgICAgICAgcmVuZGVyR3JhZGllbnRTdXJmYWNlKGFuYWx5c2lzKVxuICAgICAgICBicmVha1xuXG4gICAgICAvLyBBUkNISVRFQ1RVUkVcbiAgICAgIGNhc2UgXCJiYXJzM2RcIjpcbiAgICAgICAgcmVuZGVyQ2xhc3NpY0JhcnMoYW5hbHlzaXMpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIFwiYmFyc19ncm91cGVkXCI6XG4gICAgICAgIHJlbmRlckdyb3VwZWRCYXJzKGFuYWx5c2lzKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBcImJhcnNfY3lsaW5kcmljYWxcIjpcbiAgICAgICAgcmVuZGVyQ3lsaW5kcmljYWxCYXJzKGFuYWx5c2lzKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBcImJhcnNfcHlyYW1pZFwiOlxuICAgICAgICByZW5kZXJQeXJhbWlkQmFycyhhbmFseXNpcylcbiAgICAgICAgYnJlYWtcblxuICAgICAgLy8gR8OJT03DiVRSSVFVRVNcbiAgICAgIGNhc2UgXCJzcGhlcmVfcGFja1wiOlxuICAgICAgICByZW5kZXJTcGhlcmVQYWNrKGFuYWx5c2lzKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBcImN1YmVfbWF0cml4XCI6XG4gICAgICAgIHJlbmRlckN1YmVNYXRyaXgoYW5hbHlzaXMpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIFwiY29uZV9maWVsZFwiOlxuICAgICAgICByZW5kZXJDb25lRmllbGQoYW5hbHlzaXMpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIFwiaGVsaXhfc3BpcmFsXCI6XG4gICAgICAgIHJlbmRlckhlbGl4U3BpcmFsKGFuYWx5c2lzKVxuICAgICAgICBicmVha1xuXG4gICAgICAvLyBBUlRJU1RJUVVFU1xuICAgICAgY2FzZSBcIm1hbmRhbGFfM2RcIjpcbiAgICAgICAgcmVuZGVyTWFuZGFsYTNEKGFuYWx5c2lzKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBcImZyYWN0YWxfM2RcIjpcbiAgICAgICAgcmVuZGVyRnJhY3RhbDNEKGFuYWx5c2lzKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBcImNyeXN0YWxfM2RcIjpcbiAgICAgICAgcmVuZGVyQ3J5c3RhbDNEKGFuYWx5c2lzKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBcImdhbGF4eV8zZFwiOlxuICAgICAgICByZW5kZXJHYWxheHkzRChhbmFseXNpcylcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgXCJkbmFfaGVsaXhcIjpcbiAgICAgICAgcmVuZGVyRE5BSGVsaXgoYW5hbHlzaXMpXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIC8vIFLDiVNFQVVYXG4gICAgICBjYXNlIFwibmV0d29ya18zZFwiOlxuICAgICAgICByZW5kZXJOZXR3b3JrM0QoYW5hbHlzaXMpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIFwidHJlZV8zZFwiOlxuICAgICAgICByZW5kZXJUcmVlM0QoYW5hbHlzaXMpXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIC8vIFRFTVBPUkVMU1xuICAgICAgY2FzZSBcInRpbWVsaW5lXzNkXCI6XG4gICAgICAgIHJlbmRlclRpbWVsaW5lM0QoYW5hbHlzaXMpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIFwid2F2ZV90ZW1wb3JhbFwiOlxuICAgICAgICByZW5kZXJXYXZlVGVtcG9yYWwoYW5hbHlzaXMpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIFwic3BpcmFsX3RpbWVcIjpcbiAgICAgICAgcmVuZGVyU3BpcmFsVGltZShhbmFseXNpcylcbiAgICAgICAgYnJlYWtcblxuICAgICAgLy8gR8OJT0dSQVBISVFVRVNcbiAgICAgIGNhc2UgXCJnbG9iZV8zZFwiOlxuICAgICAgICByZW5kZXJHbG9iZTNEKGFuYWx5c2lzKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBcInRlcnJhaW5fM2RcIjpcbiAgICAgICAgcmVuZGVyVGVycmFpbjNEKGFuYWx5c2lzKVxuICAgICAgICBicmVha1xuXG4gICAgICAvLyBTQ0lFTlRJRklRVUVTXG4gICAgICBjYXNlIFwibW9sZWN1bGVfM2RcIjpcbiAgICAgICAgcmVuZGVyTW9sZWN1bGUzRChhbmFseXNpcylcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgXCJ2ZWN0b3JfZmllbGRcIjpcbiAgICAgICAgcmVuZGVyVmVjdG9yRmllbGQoYW5hbHlzaXMpXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIC8vIFNUQVRJU1RJUVVFU1xuICAgICAgY2FzZSBcImhpc3RvZ3JhbV8zZFwiOlxuICAgICAgICByZW5kZXJIaXN0b2dyYW0zRChhbmFseXNpcylcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgXCJib3hfcGxvdF8zZFwiOlxuICAgICAgICByZW5kZXJCb3hQbG90M0QoYW5hbHlzaXMpXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJlbmRlckNsYXNzaWNTY2F0dGVyKGFuYWx5c2lzKVxuICAgIH1cbiAgfVxuXG4gIC8vIEZvbmN0aW9uIHV0aWxpdGFpcmUgcG91ciBleHRyYWlyZSBsZXMgdmFsZXVycyBhdmVjIGwnYW5hbHlzZVxuICBjb25zdCBnZXRWYWx1ZXNGcm9tQW5hbHlzaXMgPSAoYW5hbHlzaXM6IERhdGFBbmFseXNpcywga2V5OiBrZXlvZiBEYXRhTWFwcGluZyk6IG51bWJlcltdID0+IHtcbiAgICBjb25zdCBjb2x1bW4gPSBhbmFseXNpcy5tYXBwaW5nW2tleV1cblxuICAgIGlmIChjb2x1bW4gPT09IFwiaW5kZXhcIikge1xuICAgICAgcmV0dXJuIGRhdGEubWFwKChfLCBpKSA9PiBpKVxuICAgIH0gZWxzZSBpZiAoY29sdW1uID09PSBcImNvdW50XCIpIHtcbiAgICAgIHJldHVybiBkYXRhLm1hcCgoKSA9PiAxKVxuICAgIH0gZWxzZSBpZiAoY29sdW1uICYmIGNvbHVtbnMuaW5jbHVkZXMoY29sdW1uKSkge1xuICAgICAgaWYgKGFuYWx5c2lzLmRhdGFSYW5nZXNbY29sdW1uXSkge1xuICAgICAgICAvLyBVdGlsaXNlciBsZXMgdmFsZXVycyBwcsOpLWNhbGN1bMOpZXMgcG91ciBsZXMgY29sb25uZXMgbnVtw6lyaXF1ZXMvdGVtcG9yZWxsZXNcbiAgICAgICAgY29uc3QgcmFuZ2UgPSBhbmFseXNpcy5kYXRhUmFuZ2VzW2NvbHVtbl1cbiAgICAgICAgcmV0dXJuIGRhdGEubWFwKChyb3csIGkpID0+IHtcbiAgICAgICAgICBjb25zdCB2YWwgPSByb3dbY29sdW1uXVxuICAgICAgICAgIGlmIChhbmFseXNpcy5kYXRhVHlwZXNbY29sdW1uXSA9PT0gXCJ0ZW1wb3JhbFwiKSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSh2YWwpLmdldFRpbWUoKVxuICAgICAgICAgICAgcmV0dXJuIGlzTmFOKHRpbWVzdGFtcCkgPyByYW5nZS5taW4gOiB0aW1lc3RhbXBcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbnVtVmFsID0gTnVtYmVyLnBhcnNlRmxvYXQodmFsKVxuICAgICAgICAgICAgcmV0dXJuICFpc05hTihudW1WYWwpICYmIGlzRmluaXRlKG51bVZhbCkgPyBudW1WYWwgOiByYW5nZS5taW5cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKGFuYWx5c2lzLmNhdGVnb3JpZXNbY29sdW1uXSkge1xuICAgICAgICAvLyBDb252ZXJ0aXIgbGVzIGNhdMOpZ29yaWVzIGVuIGluZGljZXMgbnVtw6lyaXF1ZXNcbiAgICAgICAgY29uc3QgY2F0ZWdvcmllcyA9IGFuYWx5c2lzLmNhdGVnb3JpZXNbY29sdW1uXVxuICAgICAgICByZXR1cm4gZGF0YS5tYXAoKHJvdykgPT4ge1xuICAgICAgICAgIGNvbnN0IHZhbCA9IHJvd1tjb2x1bW5dXG4gICAgICAgICAgY29uc3QgaW5kZXggPSBjYXRlZ29yaWVzLmluZGV4T2YodmFsKVxuICAgICAgICAgIHJldHVybiBpbmRleCA+PSAwID8gaW5kZXggOiAwXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGEubWFwKChfLCBpKSA9PiBpKVxuICB9XG5cbiAgLy8gVklTVUFMSVNBVElPTlMgU1DDiUNJQUxJU8OJRVMgQVZFQyBET05Ow4lFUyBEWU5BTUlRVUVTXG5cbiAgLy8gMS4gTlVBR0UgQ0xBU1NJUVVFIC0gQWRhcHTDqSBhdXggZG9ubsOpZXNcbiAgY29uc3QgcmVuZGVyQ2xhc3NpY1NjYXR0ZXIgPSAoYW5hbHlzaXM6IERhdGFBbmFseXNpcykgPT4ge1xuICAgIGNvbnN0IHhWYWx1ZXMgPSBnZXRWYWx1ZXNGcm9tQW5hbHlzaXMoYW5hbHlzaXMsIFwieEF4aXNcIilcbiAgICBjb25zdCB5VmFsdWVzID0gZ2V0VmFsdWVzRnJvbUFuYWx5c2lzKGFuYWx5c2lzLCBcInlBeGlzXCIpXG4gICAgY29uc3QgelZhbHVlcyA9IGdldFZhbHVlc0Zyb21BbmFseXNpcyhhbmFseXNpcywgXCJ6QXhpc1wiKVxuICAgIGNvbnN0IGNvbG9yVmFsdWVzID0gZ2V0VmFsdWVzRnJvbUFuYWx5c2lzKGFuYWx5c2lzLCBcImNvbG9yQnlcIilcblxuICAgIC8vIEFkYXB0ZXIgbGEgdGFpbGxlIGRlcyBtYXJxdWV1cnMgc2Vsb24gbGEgZGVuc2l0w6kgZGVzIGRvbm7DqWVzXG4gICAgY29uc3QgbWFya2VyU2l6ZSA9IE1hdGgubWF4KDMsIE1hdGgubWluKDEyLCAxMDAgLyBNYXRoLnNxcnQoZGF0YS5sZW5ndGgpKSlcblxuICAgIGNvbnN0IHBsb3REYXRhID0gW1xuICAgICAge1xuICAgICAgICB0eXBlOiBcInNjYXR0ZXIzZFwiLFxuICAgICAgICBtb2RlOiBcIm1hcmtlcnNcIixcbiAgICAgICAgeDogeFZhbHVlcyxcbiAgICAgICAgeTogeVZhbHVlcyxcbiAgICAgICAgejogelZhbHVlcyxcbiAgICAgICAgbWFya2VyOiB7XG4gICAgICAgICAgc2l6ZTogbWFya2VyU2l6ZSxcbiAgICAgICAgICBjb2xvcjogY29sb3JWYWx1ZXMsXG4gICAgICAgICAgY29sb3JzY2FsZTogXCJWaXJpZGlzXCIsXG4gICAgICAgICAgb3BhY2l0eTogTWF0aC5tYXgoMC42LCAxIC0gZGF0YS5sZW5ndGggLyAxMDAwKSwgLy8gVHJhbnNwYXJlbmNlIGFkYXB0w6llXG4gICAgICAgICAgY29sb3JiYXI6IHtcbiAgICAgICAgICAgIHRpdGxlOiBhbmFseXNpcy5tYXBwaW5nLmNvbG9yQnksXG4gICAgICAgICAgICB0aXRsZWZvbnQ6IHsgc2l6ZTogMTAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB0ZXh0OiBkYXRhLm1hcCgocm93LCBpKSA9PiB7XG4gICAgICAgICAgbGV0IHRvb2x0aXAgPSBgPGI+UG9pbnQgJHtpICsgMX08L2I+PGJyPmBcbiAgICAgICAgICB0b29sdGlwICs9IGA8Yj4ke2FuYWx5c2lzLm1hcHBpbmcueEF4aXN9OjwvYj4gJHtyb3dbYW5hbHlzaXMubWFwcGluZy54QXhpc10gfHwgXCJOL0FcIn08YnI+YFxuICAgICAgICAgIHRvb2x0aXAgKz0gYDxiPiR7YW5hbHlzaXMubWFwcGluZy55QXhpc306PC9iPiAke3Jvd1thbmFseXNpcy5tYXBwaW5nLnlBeGlzXSB8fCBcIk4vQVwifTxicj5gXG4gICAgICAgICAgdG9vbHRpcCArPSBgPGI+JHthbmFseXNpcy5tYXBwaW5nLnpBeGlzfTo8L2I+ICR7cm93W2FuYWx5c2lzLm1hcHBpbmcuekF4aXNdIHx8IFwiTi9BXCJ9PGJyPmBcbiAgICAgICAgICBpZiAoYW5hbHlzaXMubWFwcGluZy5jYXRlZ29yeUJ5ICYmIHJvd1thbmFseXNpcy5tYXBwaW5nLmNhdGVnb3J5QnldKSB7XG4gICAgICAgICAgICB0b29sdGlwICs9IGA8Yj4ke2FuYWx5c2lzLm1hcHBpbmcuY2F0ZWdvcnlCeX06PC9iPiAke3Jvd1thbmFseXNpcy5tYXBwaW5nLmNhdGVnb3J5QnldfTxicj5gXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0b29sdGlwXG4gICAgICAgIH0pLFxuICAgICAgICBob3ZlcnRlbXBsYXRlOiBcIiV7dGV4dH08ZXh0cmE+PC9leHRyYT5cIixcbiAgICAgICAgbmFtZTogYE51YWdlIDNEIC0gJHtkYXRhLmxlbmd0aH0gcG9pbnRzYCxcbiAgICAgIH0sXG4gICAgXVxuXG4gICAgY29uc3QgbGF5b3V0ID0gY3JlYXRlRHluYW1pY0xheW91dChcIk51YWdlIDNEIENsYXNzaXF1ZVwiLCBhbmFseXNpcylcbiAgICB3aW5kb3cuUGxvdGx5Lm5ld1Bsb3QocGxvdFJlZi5jdXJyZW50LCBwbG90RGF0YSwgbGF5b3V0LCBnZXRQbG90Q29uZmlnKCkpXG4gIH1cblxuICAvLyAyLiBERU5TSVTDiSAzRCAtIFZyYWllIGRlbnNpdMOpIGJhc8OpZSBzdXIgbGVzIGRvbm7DqWVzIHLDqWVsbGVzXG4gIGNvbnN0IHJlbmRlckRlbnNpdHlTY2F0dGVyID0gKGFuYWx5c2lzOiBEYXRhQW5hbHlzaXMpID0+IHtcbiAgICBjb25zdCB4VmFsdWVzID0gZ2V0VmFsdWVzRnJvbUFuYWx5c2lzKGFuYWx5c2lzLCBcInhBeGlzXCIpXG4gICAgY29uc3QgeVZhbHVlcyA9IGdldFZhbHVlc0Zyb21BbmFseXNpcyhhbmFseXNpcywgXCJ5QXhpc1wiKVxuICAgIGNvbnN0IHpWYWx1ZXMgPSBnZXRWYWx1ZXNGcm9tQW5hbHlzaXMoYW5hbHlzaXMsIFwiekF4aXNcIilcblxuICAgIC8vIEFkYXB0ZXIgbGEgcsOpc29sdXRpb24gZGUgbGEgZ3JpbGxlIHNlbG9uIGxlIG5vbWJyZSBkZSBkb25uw6llc1xuICAgIGNvbnN0IGdyaWRTaXplID0gTWF0aC5taW4oMjUsIE1hdGgubWF4KDEwLCBNYXRoLnNxcnQoZGF0YS5sZW5ndGgpKSlcblxuICAgIGNvbnN0IHhSYW5nZSA9IGFuYWx5c2lzLmRhdGFSYW5nZXNbYW5hbHlzaXMubWFwcGluZy54QXhpc11cbiAgICBjb25zdCB5UmFuZ2UgPSBhbmFseXNpcy5kYXRhUmFuZ2VzW2FuYWx5c2lzLm1hcHBpbmcueUF4aXNdXG4gICAgY29uc3QgelJhbmdlID0gYW5hbHlzaXMuZGF0YVJhbmdlc1thbmFseXNpcy5tYXBwaW5nLnpBeGlzXVxuXG4gICAgaWYgKCF4UmFuZ2UgfHwgIXlSYW5nZSB8fCAhelJhbmdlKSB7XG4gICAgICByZW5kZXJDbGFzc2ljU2NhdHRlcihhbmFseXNpcylcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGRlbnNpdHlYID0gW11cbiAgICBjb25zdCBkZW5zaXR5WSA9IFtdXG4gICAgY29uc3QgZGVuc2l0eVogPSBbXVxuICAgIGNvbnN0IGRlbnNpdHlDb2xvcnMgPSBbXVxuICAgIGNvbnN0IGRlbnNpdHlTaXplcyA9IFtdXG5cbiAgICAvLyBDYWxjdWxlciBsZSByYXlvbiBhZGFwdGF0aWYgYmFzw6kgc3VyIGxlcyB2cmFpZXMgZG9ubsOpZXNcbiAgICBjb25zdCB4U3BhbiA9IHhSYW5nZS5tYXggLSB4UmFuZ2UubWluXG4gICAgY29uc3QgeVNwYW4gPSB5UmFuZ2UubWF4IC0geVJhbmdlLm1pblxuICAgIGNvbnN0IHpTcGFuID0gelJhbmdlLm1heCAtIHpSYW5nZS5taW5cbiAgICBjb25zdCByYWRpdXMgPSBNYXRoLm1heCh4U3BhbiwgeVNwYW4sIHpTcGFuKSAvIChncmlkU2l6ZSAqIDAuOClcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JpZFNpemU7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBncmlkU2l6ZTsgaisrKSB7XG4gICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgZ3JpZFNpemU7IGsrKykge1xuICAgICAgICAgIGNvbnN0IHggPSB4UmFuZ2UubWluICsgKGkgLyAoZ3JpZFNpemUgLSAxKSkgKiB4U3BhblxuICAgICAgICAgIGNvbnN0IHkgPSB5UmFuZ2UubWluICsgKGogLyAoZ3JpZFNpemUgLSAxKSkgKiB5U3BhblxuICAgICAgICAgIGNvbnN0IHogPSB6UmFuZ2UubWluICsgKGsgLyAoZ3JpZFNpemUgLSAxKSkgKiB6U3BhblxuXG4gICAgICAgICAgLy8gQ2FsY3VsZXIgbGEgZGVuc2l0w6kgbG9jYWxlIGF2ZWMgbGVzIHZyYWllcyBkb25uw6llc1xuICAgICAgICAgIGxldCBkZW5zaXR5ID0gMFxuICAgICAgICAgIGZvciAobGV0IHAgPSAwOyBwIDwgZGF0YS5sZW5ndGg7IHArKykge1xuICAgICAgICAgICAgY29uc3QgZHggPSB4VmFsdWVzW3BdIC0geFxuICAgICAgICAgICAgY29uc3QgZHkgPSB5VmFsdWVzW3BdIC0geVxuICAgICAgICAgICAgY29uc3QgZHogPSB6VmFsdWVzW3BdIC0gelxuICAgICAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkgKyBkeiAqIGR6KVxuICAgICAgICAgICAgaWYgKGRpc3RhbmNlIDwgcmFkaXVzKSB7XG4gICAgICAgICAgICAgIGRlbnNpdHkgKz0gTWF0aC5leHAoLShkaXN0YW5jZSAqIGRpc3RhbmNlKSAvIChyYWRpdXMgKiByYWRpdXMpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFNldWlsIGFkYXB0YXRpZiBiYXPDqSBzdXIgbGEgZGVuc2l0w6kgbW95ZW5uZVxuICAgICAgICAgIGNvbnN0IHRocmVzaG9sZCA9IChkYXRhLmxlbmd0aCAvIChncmlkU2l6ZSAqIGdyaWRTaXplICogZ3JpZFNpemUpKSAqIDAuNVxuICAgICAgICAgIGlmIChkZW5zaXR5ID4gdGhyZXNob2xkKSB7XG4gICAgICAgICAgICBkZW5zaXR5WC5wdXNoKHgpXG4gICAgICAgICAgICBkZW5zaXR5WS5wdXNoKHkpXG4gICAgICAgICAgICBkZW5zaXR5Wi5wdXNoKHopXG4gICAgICAgICAgICBkZW5zaXR5Q29sb3JzLnB1c2goZGVuc2l0eSlcbiAgICAgICAgICAgIGRlbnNpdHlTaXplcy5wdXNoKE1hdGgubWF4KDQsIE1hdGgubWluKDIwLCBkZW5zaXR5ICogMTUpKSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBwbG90RGF0YSA9IFtcbiAgICAgIHtcbiAgICAgICAgdHlwZTogXCJzY2F0dGVyM2RcIixcbiAgICAgICAgbW9kZTogXCJtYXJrZXJzXCIsXG4gICAgICAgIHg6IGRlbnNpdHlYLFxuICAgICAgICB5OiBkZW5zaXR5WSxcbiAgICAgICAgejogZGVuc2l0eVosXG4gICAgICAgIG1hcmtlcjoge1xuICAgICAgICAgIHNpemU6IGRlbnNpdHlTaXplcyxcbiAgICAgICAgICBjb2xvcjogZGVuc2l0eUNvbG9ycyxcbiAgICAgICAgICBjb2xvcnNjYWxlOiBcIkhvdFwiLFxuICAgICAgICAgIG9wYWNpdHk6IDAuNyxcbiAgICAgICAgICBjb2xvcmJhcjoge1xuICAgICAgICAgICAgdGl0bGU6IFwiRGVuc2l0w6kgTG9jYWxlXCIsXG4gICAgICAgICAgICB0aXRsZWZvbnQ6IHsgc2l6ZTogMTAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB0ZXh0OiBkZW5zaXR5WC5tYXAoXG4gICAgICAgICAgKF8sIGkpID0+XG4gICAgICAgICAgICBgPGI+Wm9uZSBEZW5zZSAke2kgKyAxfTwvYj48YnI+RGVuc2l0w6k6ICR7ZGVuc2l0eUNvbG9yc1tpXS50b0ZpeGVkKDIpfTxicj5Qb3NpdGlvbjogKCR7ZGVuc2l0eVhbaV0udG9GaXhlZCgxKX0sICR7ZGVuc2l0eVlbaV0udG9GaXhlZCgxKX0sICR7ZGVuc2l0eVpbaV0udG9GaXhlZCgxKX0pYCxcbiAgICAgICAgKSxcbiAgICAgICAgaG92ZXJ0ZW1wbGF0ZTogXCIle3RleHR9PGV4dHJhPjwvZXh0cmE+XCIsXG4gICAgICAgIG5hbWU6IGBEZW5zaXTDqSAzRCAtICR7ZGVuc2l0eVgubGVuZ3RofSB6b25lc2AsXG4gICAgICB9LFxuICAgIF1cblxuICAgIGNvbnN0IGxheW91dCA9IGNyZWF0ZUR5bmFtaWNMYXlvdXQoXCJEZW5zaXTDqSAzRCAtIFpvbmVzIGRlIENvbmNlbnRyYXRpb25cIiwgYW5hbHlzaXMpXG4gICAgd2luZG93LlBsb3RseS5uZXdQbG90KHBsb3RSZWYuY3VycmVudCwgcGxvdERhdGEsIGxheW91dCwgZ2V0UGxvdENvbmZpZygpKVxuICB9XG5cbiAgLy8gMy4gQlVMTEVTIDNEIC0gVGFpbGxlcyB2cmFpbWVudCBwcm9wb3J0aW9ubmVsbGVzIGF1eCBkb25uw6llc1xuICBjb25zdCByZW5kZXJCdWJibGVTY2F0dGVyID0gKGFuYWx5c2lzOiBEYXRhQW5hbHlzaXMpID0+IHtcbiAgICBjb25zdCB4VmFsdWVzID0gZ2V0VmFsdWVzRnJvbUFuYWx5c2lzKGFuYWx5c2lzLCBcInhBeGlzXCIpXG4gICAgY29uc3QgeVZhbHVlcyA9IGdldFZhbHVlc0Zyb21BbmFseXNpcyhhbmFseXNpcywgXCJ5QXhpc1wiKVxuICAgIGNvbnN0IHpWYWx1ZXMgPSBnZXRWYWx1ZXNGcm9tQW5hbHlzaXMoYW5hbHlzaXMsIFwiekF4aXNcIilcbiAgICBjb25zdCBjb2xvclZhbHVlcyA9IGdldFZhbHVlc0Zyb21BbmFseXNpcyhhbmFseXNpcywgXCJjb2xvckJ5XCIpXG4gICAgY29uc3Qgc2l6ZVZhbHVlcyA9IGdldFZhbHVlc0Zyb21BbmFseXNpcyhhbmFseXNpcywgXCJzaXplQnlcIilcblxuICAgIC8vIEFkYXB0ZXIgbGEgdGFpbGxlIGRlcyBidWxsZXMgc2Vsb24gbGVzIGRvbm7DqWVzXG4gICAgY29uc3QgbWluU2l6ZSA9IDEwXG4gICAgY29uc3QgbWF4U2l6ZSA9IDUwXG4gICAgY29uc3Qgbm9ybWFsaXplZFNpemVzID0gc2l6ZVZhbHVlcy5tYXAodiA9PiB7XG4gICAgICBjb25zdCBtaW4gPSBNYXRoLm1pbiguLi5zaXplVmFsdWVzKVxuICAgICAgY29uc3QgbWF4ID0gTWF0aC5tYXgoLi4uc2l6ZVZhbHVlcylcbiAgICAgIHJldHVybiBtaW5TaXplICsgKCh2IC0gbWluKSAvIChtYXggLSBtaW4pKSAqIChtYXhTaXplIC0gbWluU2l6ZSlcbiAgICB9KVxuXG4gICAgY29uc3QgcGxvdERhdGEgPSBbXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFwic2NhdHRlcjNkXCIsXG4gICAgICAgIG1vZGU6IFwibWFya2Vyc1wiLFxuICAgICAgICB4OiB4VmFsdWVzLFxuICAgICAgICB5OiB5VmFsdWVzLFxuICAgICAgICB6OiB6VmFsdWVzLFxuICAgICAgICBtYXJrZXI6IHtcbiAgICAgICAgICBzaXplOiBub3JtYWxpemVkU2l6ZXMsXG4gICAgICAgICAgY29sb3I6IGNvbG9yVmFsdWVzLFxuICAgICAgICAgIGNvbG9yc2NhbGU6IFwiUGxhc21hXCIsXG4gICAgICAgICAgb3BhY2l0eTogMC43NSxcbiAgICAgICAgICBjb2xvcmJhcjoge1xuICAgICAgICAgICAgdGl0bGU6IGFuYWx5c2lzLm1hcHBpbmcuY29sb3JCeSxcbiAgICAgICAgICAgIHRpdGxlZm9udDogeyBzaXplOiAxMCB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgbGluZTogeyBjb2xvcjogXCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMylcIiwgd2lkdGg6IDEgfSxcbiAgICAgICAgfSxcbiAgICAgICAgdGV4dDogZGF0YS5tYXAoKHJvdywgaSkgPT4ge1xuICAgICAgICAgIGxldCB0b29sdGlwID0gYDxiPkJ1bGxlICR7aSArIDF9PC9iPjxicj5gXG4gICAgICAgICAgdG9vbHRpcCArPSBgPGI+VGFpbGxlICgke2FuYWx5c2lzLm1hcHBpbmcuc2l6ZUJ5fSk6PC9iPiAke3Jvd1thbmFseXNpcy5tYXBwaW5nLnNpemVCeV0gfHwgXCJOL0FcIn08YnI+YFxuICAgICAgICAgIHRvb2x0aXAgKz0gYDxiPkNvdWxldXIgKCR7YW5hbHlzaXMubWFwcGluZy5jb2xvckJ5fSk6PC9iPiAke3Jvd1thbmFseXNpcy5tYXBwaW5nLmNvbG9yQnldIHx8IFwiTi9BXCJ9PGJyPmBcbiAgICAgICAgICBpZiAoYW5hbHlzaXMubWFwcGluZy5jYXRlZ29yeUJ5ICYmIHJvd1thbmFseXNpcy5tYXBwaW5nLmNhdGVnb3J5QnldKSB7XG4gICAgICAgICAgICB0b29sdGlwICs9IGA8Yj5DYXTDqWdvcmllOjwvYj4gJHtyb3dbYW5hbHlzaXMubWFwcGluZy5jYXRlZ29yeUJ5XX08YnI+YFxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdG9vbHRpcFxuICAgICAgICB9KSxcbiAgICAgICAgaG92ZXJ0ZW1wbGF0ZTogXCIle3RleHR9PGV4dHJhPjwvZXh0cmE+XCIsXG4gICAgICAgIG5hbWU6IGBCdWxsZXMgM0QgLSAke2RhdGEubGVuZ3RofSDDqWzDqW1lbnRzYCxcbiAgICAgIH0sXG4gICAgXVxuXG4gICAgY29uc3QgbGF5b3V0ID0gY3JlYXRlRHluYW1pY0xheW91dChcIkJ1bGxlcyAzRCAtIFRhaWxsZXMgUHJvcG9ydGlvbm5lbGxlc1wiLCBhbmFseXNpcylcbiAgICB3aW5kb3cuUGxvdGx5Lm5ld1Bsb3QocGxvdFJlZi5jdXJyZW50LCBwbG90RGF0YSwgbGF5b3V0LCBnZXRQbG90Q29uZmlnKCkpXG4gIH1cblxuICAvLyA0LiBNQU5EQUxBIDNEIC0gQmFzw6kgc3VyIGxlcyBwYXR0ZXJucyBkZXMgZG9ubsOpZXNcbiAgY29uc3QgcmVuZGVyTWFuZGFsYTNEID0gKGFuYWx5c2lzOiBEYXRhQW5hbHlzaXMpID0+IHtcbiAgICBjb25zdCBjb2xvclZhbHVlcyA9IGdldFZhbHVlc0Zyb21BbmFseXNpcyhhbmFseXNpcywgXCJjb2xvckJ5XCIpXG4gICAgY29uc3Qgc2l6ZVZhbHVlcyA9IGdldFZhbHVlc0Zyb21BbmFseXNpcyhhbmFseXNpcywgXCJzaXplQnlcIilcblxuICAgIGNvbnN0IG1hbmRhbGFYOiBudW1iZXJbXSA9IFtdXG4gICAgY29uc3QgbWFuZGFsYVk6IG51bWJlcltdID0gW11cbiAgICBjb25zdCBtYW5kYWxhWjogbnVtYmVyW10gPSBbXVxuICAgIGNvbnN0IG1hbmRhbGFDb2xvcnM6IG51bWJlcltdID0gW11cbiAgICBjb25zdCBtYW5kYWxhU2l6ZXM6IG51bWJlcltdID0gW11cblxuICAgIC8vIFV0aWxpc2VyIGxlcyB2cmFpZXMgZG9ubsOpZXMgcG91ciBjcsOpZXIgbGVzIHBhdHRlcm5zXG4gICAgZGF0YS5mb3JFYWNoKChyb3csIGkpID0+IHtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRJbmRleCA9IGkgLyBkYXRhLmxlbmd0aFxuICAgICAgY29uc3QgY29sb3JWYWwgPSBjb2xvclZhbHVlc1tpXVxuICAgICAgY29uc3Qgc2l6ZVZhbCA9IHNpemVWYWx1ZXNbaV1cblxuICAgICAgLy8gTm9tYnJlIGRlIHRvdXJzIGJhc8OpIHN1ciBsYSB2YXJpYW5jZSBkZXMgZG9ubsOpZXNcbiAgICAgIGNvbnN0IGNvbG9yUmFuZ2UgPSBhbmFseXNpcy5kYXRhUmFuZ2VzW2FuYWx5c2lzLm1hcHBpbmcuY29sb3JCeV1cbiAgICAgIGNvbnN0IHRvdXJzID0gY29sb3JSYW5nZSA/IDQgKyAoKGNvbG9yVmFsIC0gY29sb3JSYW5nZS5taW4pIC8gKGNvbG9yUmFuZ2UubWF4IC0gY29sb3JSYW5nZS5taW4pKSAqIDQgOiA2XG5cbiAgICAgIGNvbnN0IGFuZ2xlID0gbm9ybWFsaXplZEluZGV4ICogdG91cnMgKiBNYXRoLlBJXG4gICAgICBjb25zdCByYWRpdXMgPSAxICsgTWF0aC5zaW4oYW5nbGUgKiAzKSAqIDAuNVxuICAgICAgY29uc3QgaGVpZ2h0ID0gTWF0aC5zaW4oYW5nbGUgKiAyKSAqIDAuM1xuXG4gICAgICAvLyBQb2ludCBwcmluY2lwYWxcbiAgICAgIG1hbmRhbGFYLnB1c2goTWF0aC5jb3MoYW5nbGUpICogcmFkaXVzKVxuICAgICAgbWFuZGFsYVkucHVzaChNYXRoLnNpbihhbmdsZSkgKiByYWRpdXMpXG4gICAgICBtYW5kYWxhWi5wdXNoKGhlaWdodClcbiAgICAgIG1hbmRhbGFDb2xvcnMucHVzaChjb2xvclZhbClcbiAgICAgIG1hbmRhbGFTaXplcy5wdXNoKE1hdGgubWF4KDMsIE1hdGgubWluKDgsIChzaXplVmFsIC8gKGNvbG9yUmFuZ2U/Lm1heCB8fCAxKSkgKiA2ICsgMykpKVxuXG4gICAgICAvLyBQw6l0YWxlcyBiYXPDqXMgc3VyIGxlcyBjYXTDqWdvcmllc1xuICAgICAgY29uc3QgbnVtUGV0YWxzID1cbiAgICAgICAgYW5hbHlzaXMubWFwcGluZy5jYXRlZ29yeUJ5ICYmIGFuYWx5c2lzLmNhdGVnb3JpZXNbYW5hbHlzaXMubWFwcGluZy5jYXRlZ29yeUJ5XVxuICAgICAgICAgID8gTWF0aC5taW4oNiwgYW5hbHlzaXMuY2F0ZWdvcmllc1thbmFseXNpcy5tYXBwaW5nLmNhdGVnb3J5QnldLmxlbmd0aClcbiAgICAgICAgICA6IDVcblxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBudW1QZXRhbHM7IGorKykge1xuICAgICAgICBjb25zdCBwZXRhbEFuZ2xlID0gYW5nbGUgKyAoaiAqIDIgKiBNYXRoLlBJKSAvIG51bVBldGFsc1xuICAgICAgICBjb25zdCBwZXRhbFJhZGl1cyA9IHJhZGl1cyAqIDAuM1xuICAgICAgICBtYW5kYWxhWC5wdXNoKE1hdGguY29zKGFuZ2xlKSAqIHJhZGl1cyArIE1hdGguY29zKHBldGFsQW5nbGUpICogcGV0YWxSYWRpdXMpXG4gICAgICAgIG1hbmRhbGFZLnB1c2goTWF0aC5zaW4oYW5nbGUpICogcmFkaXVzICsgTWF0aC5zaW4ocGV0YWxBbmdsZSkgKiBwZXRhbFJhZGl1cylcbiAgICAgICAgbWFuZGFsYVoucHVzaChoZWlnaHQgKyBNYXRoLnNpbihwZXRhbEFuZ2xlICogMikgKiAwLjEpXG4gICAgICAgIG1hbmRhbGFDb2xvcnMucHVzaChjb2xvclZhbCAqIDAuOClcbiAgICAgICAgbWFuZGFsYVNpemVzLnB1c2goTWF0aC5tYXgoMiwgbWFuZGFsYVNpemVzW21hbmRhbGFTaXplcy5sZW5ndGggLSAxXSAqIDAuNikpXG4gICAgICB9XG4gICAgfSlcblxuICAgIGNvbnN0IHBsb3REYXRhID0gW1xuICAgICAge1xuICAgICAgICB0eXBlOiBcInNjYXR0ZXIzZFwiLFxuICAgICAgICBtb2RlOiBcIm1hcmtlcnNcIixcbiAgICAgICAgeDogbWFuZGFsYVgsXG4gICAgICAgIHk6IG1hbmRhbGFZLFxuICAgICAgICB6OiBtYW5kYWxhWixcbiAgICAgICAgbWFya2VyOiB7XG4gICAgICAgICAgc2l6ZTogbWFuZGFsYVNpemVzLFxuICAgICAgICAgIGNvbG9yOiBtYW5kYWxhQ29sb3JzLFxuICAgICAgICAgIGNvbG9yc2NhbGU6IFwiUmFpbmJvd1wiLFxuICAgICAgICAgIG9wYWNpdHk6IDAuOCxcbiAgICAgICAgICBjb2xvcmJhcjoge1xuICAgICAgICAgICAgdGl0bGU6IGBIYXJtb25pZSAoJHthbmFseXNpcy5tYXBwaW5nLmNvbG9yQnl9KWAsXG4gICAgICAgICAgICB0aXRsZWZvbnQ6IHsgc2l6ZTogMTAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBuYW1lOiBgTWFuZGFsYSAzRCAtICR7ZGF0YS5sZW5ndGh9IMOpbMOpbWVudHMgc291cmNlYCxcbiAgICAgIH0sXG4gICAgXVxuXG4gICAgY29uc3QgbGF5b3V0ID0gY3JlYXRlRHluYW1pY0xheW91dChcIk1hbmRhbGEgM0QgLSBNb3RpZnMgU2FjcsOpc1wiLCBhbmFseXNpcylcbiAgICBsYXlvdXQuc2NlbmUuY2FtZXJhID0geyBleWU6IHsgeDogMCwgeTogMCwgejogMi41IH0gfVxuICAgIHdpbmRvdy5QbG90bHkubmV3UGxvdChwbG90UmVmLmN1cnJlbnQsIHBsb3REYXRhLCBsYXlvdXQsIGdldFBsb3RDb25maWcoKSlcbiAgfVxuXG4gIC8vIDUuIEdBTEFYSUUgM0QgLSBTdHJ1Y3R1cmUgYmFzw6llIHN1ciBsZXMgZG9ubsOpZXNcbiAgY29uc3QgcmVuZGVyR2FsYXh5M0QgPSAoYW5hbHlzaXM6IERhdGFBbmFseXNpcykgPT4ge1xuICAgIGNvbnN0IGNvbG9yVmFsdWVzID0gZ2V0VmFsdWVzRnJvbUFuYWx5c2lzKGFuYWx5c2lzLCBcImNvbG9yQnlcIilcbiAgICBjb25zdCBzaXplVmFsdWVzID0gZ2V0VmFsdWVzRnJvbUFuYWx5c2lzKGFuYWx5c2lzLCBcInNpemVCeVwiKVxuXG4gICAgY29uc3QgZ2FsYXh5WCA9IFtdXG4gICAgY29uc3QgZ2FsYXh5WSA9IFtdXG4gICAgY29uc3QgZ2FsYXh5WiA9IFtdXG4gICAgY29uc3QgZ2FsYXh5Q29sb3JzID0gW11cbiAgICBjb25zdCBnYWxheHlTaXplcyA9IFtdXG5cbiAgICAvLyBBbmFseXNlciBsYSBkaXN0cmlidXRpb24gcG91ciBjcsOpZXIgbGVzIGJyYXMgZ2FsYWN0aXF1ZXNcbiAgICBjb25zdCBjb2xvclJhbmdlID0gYW5hbHlzaXMuZGF0YVJhbmdlc1thbmFseXNpcy5tYXBwaW5nLmNvbG9yQnldXG4gICAgY29uc3Qgc2l6ZVJhbmdlID0gYW5hbHlzaXMuZGF0YVJhbmdlc1thbmFseXNpcy5tYXBwaW5nLnNpemVCeV1cblxuICAgIGRhdGEuZm9yRWFjaCgocm93LCBpKSA9PiB7XG4gICAgICBjb25zdCB0ID0gaSAvIGRhdGEubGVuZ3RoXG4gICAgICBjb25zdCBjb2xvclZhbCA9IGNvbG9yVmFsdWVzW2ldXG4gICAgICBjb25zdCBzaXplVmFsID0gc2l6ZVZhbHVlc1tpXVxuXG4gICAgICAvLyBQb3NpdGlvbiBkYW5zIGxhIGdhbGF4aWUgYmFzw6llIHN1ciBsZXMgdmFsZXVycyBkZXMgZG9ubsOpZXNcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRDb2xvciA9IGNvbG9yUmFuZ2UgPyAoY29sb3JWYWwgLSBjb2xvclJhbmdlLm1pbikgLyAoY29sb3JSYW5nZS5tYXggLSBjb2xvclJhbmdlLm1pbikgOiB0XG4gICAgICBjb25zdCBub3JtYWxpemVkU2l6ZSA9IHNpemVSYW5nZSA/IChzaXplVmFsIC0gc2l6ZVJhbmdlLm1pbikgLyAoc2l6ZVJhbmdlLm1heCAtIHNpemVSYW5nZS5taW4pIDogMC41XG5cbiAgICAgIC8vIEFuZ2xlIGV0IHJheW9uIGJhc8OpcyBzdXIgbGVzIGRvbm7DqWVzXG4gICAgICBjb25zdCBhbmdsZSA9IG5vcm1hbGl6ZWRDb2xvciAqIDYgKiBNYXRoLlBJICsgdCAqIDIgKiBNYXRoLlBJXG4gICAgICBjb25zdCByYWRpdXMgPSBub3JtYWxpemVkU2l6ZSAqIDMgKyB0ICogMC41XG4gICAgICBjb25zdCBoZWlnaHQgPSAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiAwLjIgKiAoMSAtIHQpIC8vIFBsdXMgcGxhdCB2ZXJzIGwnZXh0w6lyaWV1clxuXG4gICAgICAvLyBCcmFzIHByaW5jaXBhbFxuICAgICAgZ2FsYXh5WC5wdXNoKE1hdGguY29zKGFuZ2xlKSAqIHJhZGl1cylcbiAgICAgIGdhbGF4eVkucHVzaChNYXRoLnNpbihhbmdsZSkgKiByYWRpdXMpXG4gICAgICBnYWxheHlaLnB1c2goaGVpZ2h0KVxuICAgICAgZ2FsYXh5Q29sb3JzLnB1c2goY29sb3JWYWwpXG4gICAgICBnYWxheHlTaXplcy5wdXNoKE1hdGgubWF4KDIsIE1hdGgubWluKDEyLCAoMSAtIG5vcm1hbGl6ZWRTaXplKSAqIDggKyAzKSkpXG5cbiAgICAgIC8vIEJyYXMgc2Vjb25kYWlyZSBzaSBhc3NleiBkZSBkb25uw6llc1xuICAgICAgaWYgKGRhdGEubGVuZ3RoID4gMjApIHtcbiAgICAgICAgY29uc3QgYW5nbGUyID0gYW5nbGUgKyBNYXRoLlBJICogMC44XG4gICAgICAgIGNvbnN0IHJhZGl1czIgPSByYWRpdXMgKiAwLjdcbiAgICAgICAgZ2FsYXh5WC5wdXNoKE1hdGguY29zKGFuZ2xlMikgKiByYWRpdXMyKVxuICAgICAgICBnYWxheHlZLnB1c2goTWF0aC5zaW4oYW5nbGUyKSAqIHJhZGl1czIpXG4gICAgICAgIGdhbGF4eVoucHVzaChoZWlnaHQgKiAwLjUpXG4gICAgICAgIGdhbGF4eUNvbG9ycy5wdXNoKGNvbG9yVmFsICogMC44KVxuICAgICAgICBnYWxheHlTaXplcy5wdXNoKE1hdGgubWF4KDEsIGdhbGF4eVNpemVzW2dhbGF4eVNpemVzLmxlbmd0aCAtIDFdICogMC43KSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgY29uc3QgcGxvdERhdGEgPSBbXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFwic2NhdHRlcjNkXCIsXG4gICAgICAgIG1vZGU6IFwibWFya2Vyc1wiLFxuICAgICAgICB4OiBnYWxheHlYLFxuICAgICAgICB5OiBnYWxheHlZLFxuICAgICAgICB6OiBnYWxheHlaLFxuICAgICAgICBtYXJrZXI6IHtcbiAgICAgICAgICBzaXplOiBnYWxheHlTaXplcyxcbiAgICAgICAgICBjb2xvcjogZ2FsYXh5Q29sb3JzLFxuICAgICAgICAgIGNvbG9yc2NhbGU6IFwiVmlyaWRpc1wiLFxuICAgICAgICAgIG9wYWNpdHk6IDAuOCxcbiAgICAgICAgICBjb2xvcmJhcjoge1xuICAgICAgICAgICAgdGl0bGU6IGBMdW1pbm9zaXTDqSAoJHthbmFseXNpcy5tYXBwaW5nLmNvbG9yQnl9KWAsXG4gICAgICAgICAgICB0aXRsZWZvbnQ6IHsgc2l6ZTogMTAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBuYW1lOiBgR2FsYXhpZSAzRCAtICR7ZGF0YS5sZW5ndGh9IMOpdG9pbGVzYCxcbiAgICAgIH0sXG4gICAgXVxuXG4gICAgY29uc3QgbGF5b3V0ID0gY3JlYXRlRHluYW1pY0xheW91dChcIkdhbGF4aWUgM0QgLSBTcGlyYWxlIENvc21pcXVlXCIsIGFuYWx5c2lzKVxuICAgIGxheW91dC5zY2VuZS5iZ2NvbG9yID0gXCJyZ2JhKDAsIDAsIDIwLCAwLjkpXCJcbiAgICBsYXlvdXQuc2NlbmUuY2FtZXJhID0geyBleWU6IHsgeDogMS41LCB5OiAxLjUsIHo6IDEgfSB9XG4gICAgd2luZG93LlBsb3RseS5uZXdQbG90KHBsb3RSZWYuY3VycmVudCwgcGxvdERhdGEsIGxheW91dCwgZ2V0UGxvdENvbmZpZygpKVxuICB9XG5cbiAgLy8gNi4gVElNRUxJTkUgM0QgLSBQb3VyIGRvbm7DqWVzIHRlbXBvcmVsbGVzXG4gIGNvbnN0IHJlbmRlclRpbWVsaW5lM0QgPSAoYW5hbHlzaXM6IERhdGFBbmFseXNpcykgPT4ge1xuICAgIC8vIENoZXJjaGVyIHVuZSBjb2xvbm5lIHRlbXBvcmVsbGVcbiAgICBjb25zdCB0aW1lQ29sdW1uID0gYW5hbHlzaXMudGVtcG9yYWxDb2x1bW5zWzBdIHx8IGFuYWx5c2lzLm1hcHBpbmcueEF4aXNcbiAgICBjb25zdCB2YWx1ZUNvbHVtbiA9IGFuYWx5c2lzLm1hcHBpbmcueUF4aXNcbiAgICBjb25zdCBjb2xvckNvbHVtbiA9IGFuYWx5c2lzLm1hcHBpbmcuY29sb3JCeVxuXG4gICAgY29uc3QgdGltZVZhbHVlcyA9IGdldFZhbHVlc0Zyb21BbmFseXNpcyhhbmFseXNpcywgXCJ4QXhpc1wiKVxuICAgIGNvbnN0IHZhbHVlcyA9IGdldFZhbHVlc0Zyb21BbmFseXNpcyhhbmFseXNpcywgXCJ5QXhpc1wiKVxuICAgIGNvbnN0IGNvbG9yVmFsdWVzID0gZ2V0VmFsdWVzRnJvbUFuYWx5c2lzKGFuYWx5c2lzLCBcImNvbG9yQnlcIilcblxuICAgIC8vIFRyaWVyIHBhciB0ZW1wcyBzaSBjJ2VzdCB0ZW1wb3JlbFxuICAgIGNvbnN0IHNvcnRlZEluZGljZXMgPSB0aW1lVmFsdWVzLm1hcCgoXywgaSkgPT4gaSkuc29ydCgoYSwgYikgPT4gdGltZVZhbHVlc1thXSAtIHRpbWVWYWx1ZXNbYl0pXG5cbiAgICBjb25zdCB0aW1lbGluZVggPSBzb3J0ZWRJbmRpY2VzLm1hcCgoaSkgPT4gdGltZVZhbHVlc1tpXSlcbiAgICBjb25zdCB0aW1lbGluZVkgPSBzb3J0ZWRJbmRpY2VzLm1hcCgoaSkgPT4gdmFsdWVzW2ldKVxuICAgIGNvbnN0IHRpbWVsaW5lWiA9IHNvcnRlZEluZGljZXMubWFwKChfLCBpKSA9PiBpICogMC4xKSAvLyDDiWzDqXZhdGlvbiBwcm9ncmVzc2l2ZVxuICAgIGNvbnN0IHRpbWVsaW5lQ29sb3JzID0gc29ydGVkSW5kaWNlcy5tYXAoKGkpID0+IGNvbG9yVmFsdWVzW2ldKVxuXG4gICAgY29uc3QgcGxvdERhdGEgPSBbXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFwic2NhdHRlcjNkXCIsXG4gICAgICAgIG1vZGU6IFwibWFya2VycytsaW5lc1wiLFxuICAgICAgICB4OiB0aW1lbGluZVgsXG4gICAgICAgIHk6IHRpbWVsaW5lWSxcbiAgICAgICAgejogdGltZWxpbmVaLFxuICAgICAgICBtYXJrZXI6IHtcbiAgICAgICAgICBzaXplOiA2LFxuICAgICAgICAgIGNvbG9yOiB0aW1lbGluZUNvbG9ycyxcbiAgICAgICAgICBjb2xvcnNjYWxlOiBcIlZpcmlkaXNcIixcbiAgICAgICAgICBvcGFjaXR5OiAwLjgsXG4gICAgICAgICAgY29sb3JiYXI6IHtcbiAgICAgICAgICAgIHRpdGxlOiBhbmFseXNpcy5tYXBwaW5nLmNvbG9yQnksXG4gICAgICAgICAgICB0aXRsZWZvbnQ6IHsgc2l6ZTogMTAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBsaW5lOiB7XG4gICAgICAgICAgY29sb3I6IFwicmdiYSgxMDAsIDEwMCwgMTAwLCAwLjYpXCIsXG4gICAgICAgICAgd2lkdGg6IDMsXG4gICAgICAgIH0sXG4gICAgICAgIHRleHQ6IHNvcnRlZEluZGljZXMubWFwKChpKSA9PiB7XG4gICAgICAgICAgY29uc3Qgcm93ID0gZGF0YVtpXVxuICAgICAgICAgIGxldCB0b29sdGlwID0gYDxiPlBvaW50IHRlbXBvcmVsICR7aSArIDF9PC9iPjxicj5gXG4gICAgICAgICAgdG9vbHRpcCArPSBgPGI+VGVtcHM6PC9iPiAke3Jvd1t0aW1lQ29sdW1uXSB8fCBcIk4vQVwifTxicj5gXG4gICAgICAgICAgdG9vbHRpcCArPSBgPGI+VmFsZXVyOjwvYj4gJHtyb3dbdmFsdWVDb2x1bW5dIHx8IFwiTi9BXCJ9PGJyPmBcbiAgICAgICAgICByZXR1cm4gdG9vbHRpcFxuICAgICAgICB9KSxcbiAgICAgICAgaG92ZXJ0ZW1wbGF0ZTogXCIle3RleHR9PGV4dHJhPjwvZXh0cmE+XCIsXG4gICAgICAgIG5hbWU6IGBUaW1lbGluZSAzRCAtICR7ZGF0YS5sZW5ndGh9IHBvaW50c2AsXG4gICAgICB9LFxuICAgIF1cblxuICAgIGNvbnN0IGxheW91dCA9IGNyZWF0ZUR5bmFtaWNMYXlvdXQoXCJUaW1lbGluZSAzRCAtIMOJdm9sdXRpb24gVGVtcG9yZWxsZVwiLCBhbmFseXNpcylcbiAgICB3aW5kb3cuUGxvdGx5Lm5ld1Bsb3QocGxvdFJlZi5jdXJyZW50LCBwbG90RGF0YSwgbGF5b3V0LCBnZXRQbG90Q29uZmlnKCkpXG4gIH1cblxuICAvLyBGb25jdGlvbnMgZGUgcmVuZHUgc2ltcGxpZmnDqWVzIHBvdXIgbGVzIGF1dHJlcyBtb2TDqGxlc1xuICBjb25zdCByZW5kZXJBbmltYXRlZFNjYXR0ZXIgPSAoYW5hbHlzaXM6IERhdGFBbmFseXNpcykgPT4gcmVuZGVyQ2xhc3NpY1NjYXR0ZXIoYW5hbHlzaXMpXG4gIGNvbnN0IHJlbmRlckNsdXN0ZXJlZFNjYXR0ZXIgPSAoYW5hbHlzaXM6IERhdGFBbmFseXNpcykgPT4gcmVuZGVyQnViYmxlU2NhdHRlcihhbmFseXNpcylcbiAgY29uc3QgcmVuZGVyQ2xhc3NpY1N1cmZhY2UgPSAoYW5hbHlzaXM6IERhdGFBbmFseXNpcykgPT4gcmVuZGVyQ29udG91clN1cmZhY2UoYW5hbHlzaXMpXG4gIGNvbnN0IHJlbmRlck1lc2hTdXJmYWNlID0gKGFuYWx5c2lzOiBEYXRhQW5hbHlzaXMpID0+IHJlbmRlckNvbnRvdXJTdXJmYWNlKGFuYWx5c2lzKVxuICBjb25zdCByZW5kZXJHcmFkaWVudFN1cmZhY2UgPSAoYW5hbHlzaXM6IERhdGFBbmFseXNpcykgPT4gcmVuZGVyQ29udG91clN1cmZhY2UoYW5hbHlzaXMpXG4gIGNvbnN0IHJlbmRlckNsYXNzaWNCYXJzID0gKGFuYWx5c2lzOiBEYXRhQW5hbHlzaXMpID0+IHJlbmRlckJ1YmJsZVNjYXR0ZXIoYW5hbHlzaXMpXG4gIGNvbnN0IHJlbmRlckdyb3VwZWRCYXJzID0gKGFuYWx5c2lzOiBEYXRhQW5hbHlzaXMpID0+IHJlbmRlckJ1YmJsZVNjYXR0ZXIoYW5hbHlzaXMpXG4gIGNvbnN0IHJlbmRlckN5bGluZHJpY2FsQmFycyA9IChhbmFseXNpczogRGF0YUFuYWx5c2lzKSA9PiByZW5kZXJCdWJibGVTY2F0dGVyKGFuYWx5c2lzKVxuICBjb25zdCByZW5kZXJQeXJhbWlkQmFycyA9IChhbmFseXNpczogRGF0YUFuYWx5c2lzKSA9PiByZW5kZXJCdWJibGVTY2F0dGVyKGFuYWx5c2lzKVxuICBjb25zdCByZW5kZXJTcGhlcmVQYWNrID0gKGFuYWx5c2lzOiBEYXRhQW5hbHlzaXMpID0+IHJlbmRlckJ1YmJsZVNjYXR0ZXIoYW5hbHlzaXMpXG4gIGNvbnN0IHJlbmRlckN1YmVNYXRyaXggPSAoYW5hbHlzaXM6IERhdGFBbmFseXNpcykgPT4gcmVuZGVyQ2xhc3NpY1NjYXR0ZXIoYW5hbHlzaXMpXG4gIGNvbnN0IHJlbmRlckNvbmVGaWVsZCA9IChhbmFseXNpczogRGF0YUFuYWx5c2lzKSA9PiByZW5kZXJDbGFzc2ljU2NhdHRlcihhbmFseXNpcylcbiAgY29uc3QgcmVuZGVySGVsaXhTcGlyYWwgPSAoYW5hbHlzaXM6IERhdGFBbmFseXNpcykgPT4gcmVuZGVyRE5BSGVsaXgoYW5hbHlzaXMpXG4gIGNvbnN0IHJlbmRlckZyYWN0YWwzRCA9IChhbmFseXNpczogRGF0YUFuYWx5c2lzKSA9PiByZW5kZXJNYW5kYWxhM0QoYW5hbHlzaXMpXG4gIGNvbnN0IHJlbmRlckNyeXN0YWwzRCA9IChhbmFseXNpczogRGF0YUFuYWx5c2lzKSA9PiByZW5kZXJDbGFzc2ljU2NhdHRlcihhbmFseXNpcylcbiAgY29uc3QgcmVuZGVyTmV0d29yazNEID0gKGFuYWx5c2lzOiBEYXRhQW5hbHlzaXMpID0+IHJlbmRlckNsYXNzaWNTY2F0dGVyKGFuYWx5c2lzKVxuICBjb25zdCByZW5kZXJUcmVlM0QgPSAoYW5hbHlzaXM6IERhdGFBbmFseXNpcykgPT4gcmVuZGVyQ2xhc3NpY1NjYXR0ZXIoYW5hbHlzaXMpXG4gIGNvbnN0IHJlbmRlcldhdmVUZW1wb3JhbCA9IChhbmFseXNpczogRGF0YUFuYWx5c2lzKSA9PiByZW5kZXJUaW1lbGluZTNEKGFuYWx5c2lzKVxuICBjb25zdCByZW5kZXJTcGlyYWxUaW1lID0gKGFuYWx5c2lzOiBEYXRhQW5hbHlzaXMpID0+IHJlbmRlclRpbWVsaW5lM0QoYW5hbHlzaXMpXG4gIGNvbnN0IHJlbmRlckdsb2JlM0QgPSAoYW5hbHlzaXM6IERhdGFBbmFseXNpcykgPT4gcmVuZGVyQ2xhc3NpY1NjYXR0ZXIoYW5hbHlzaXMpXG4gIGNvbnN0IHJlbmRlclRlcnJhaW4zRCA9IChhbmFseXNpczogRGF0YUFuYWx5c2lzKSA9PiByZW5kZXJDb250b3VyU3VyZmFjZShhbmFseXNpcylcbiAgY29uc3QgcmVuZGVyTW9sZWN1bGUzRCA9IChhbmFseXNpczogRGF0YUFuYWx5c2lzKSA9PiByZW5kZXJDbGFzc2ljU2NhdHRlcihhbmFseXNpcylcbiAgY29uc3QgcmVuZGVyVmVjdG9yRmllbGQgPSAoYW5hbHlzaXM6IERhdGFBbmFseXNpcykgPT4gcmVuZGVyQ2xhc3NpY1NjYXR0ZXIoYW5hbHlzaXMpXG4gIGNvbnN0IHJlbmRlckhpc3RvZ3JhbTNEID0gKGFuYWx5c2lzOiBEYXRhQW5hbHlzaXMpID0+IHJlbmRlckJ1YmJsZVNjYXR0ZXIoYW5hbHlzaXMpXG4gIGNvbnN0IHJlbmRlckJveFBsb3QzRCA9IChhbmFseXNpczogRGF0YUFuYWx5c2lzKSA9PiByZW5kZXJCdWJibGVTY2F0dGVyKGFuYWx5c2lzKVxuXG4gIC8vIDcuIFNVUkZBQ0UgQVZFQyBDT05UT1VSUyAtIEJhc8OpZSBzdXIgbGVzIHZyYWllcyBkb25uw6llc1xuICBjb25zdCByZW5kZXJDb250b3VyU3VyZmFjZSA9IChhbmFseXNpczogRGF0YUFuYWx5c2lzKSA9PiB7XG4gICAgY29uc3QgeFZhbHVlcyA9IGdldFZhbHVlc0Zyb21BbmFseXNpcyhhbmFseXNpcywgXCJ4QXhpc1wiKVxuICAgIGNvbnN0IHlWYWx1ZXMgPSBnZXRWYWx1ZXNGcm9tQW5hbHlzaXMoYW5hbHlzaXMsIFwieUF4aXNcIilcbiAgICBjb25zdCB6VmFsdWVzID0gZ2V0VmFsdWVzRnJvbUFuYWx5c2lzKGFuYWx5c2lzLCBcInpBeGlzXCIpXG5cbiAgICBjb25zdCB4UmFuZ2UgPSBhbmFseXNpcy5kYXRhUmFuZ2VzW2FuYWx5c2lzLm1hcHBpbmcueEF4aXNdXG4gICAgY29uc3QgeVJhbmdlID0gYW5hbHlzaXMuZGF0YVJhbmdlc1thbmFseXNpcy5tYXBwaW5nLnlBeGlzXVxuXG4gICAgaWYgKCF4UmFuZ2UgfHwgIXlSYW5nZSkge1xuICAgICAgcmVuZGVyQ2xhc3NpY1NjYXR0ZXIoYW5hbHlzaXMpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBBZGFwdGVyIGxhIHLDqXNvbHV0aW9uIHNlbG9uIGxhIGRlbnNpdMOpIGRlcyBkb25uw6llc1xuICAgIGNvbnN0IHNpemUgPSBNYXRoLm1pbigzMCwgTWF0aC5tYXgoMTUsIE1hdGguc3FydChkYXRhLmxlbmd0aCkpKVxuICAgIGNvbnN0IHhNaW4gPSB4UmFuZ2UubWluXG4gICAgY29uc3QgeE1heCA9IHhSYW5nZS5tYXhcbiAgICBjb25zdCB5TWluID0geVJhbmdlLm1pblxuICAgIGNvbnN0IHlNYXggPSB5UmFuZ2UubWF4XG5cbiAgICBjb25zdCB4R3JpZCA9IEFycmF5LmZyb20oeyBsZW5ndGg6IHNpemUgfSwgKF8sIGkpID0+IHhNaW4gKyAoaSAvIChzaXplIC0gMSkpICogKHhNYXggLSB4TWluKSlcbiAgICBjb25zdCB5R3JpZCA9IEFycmF5LmZyb20oeyBsZW5ndGg6IHNpemUgfSwgKF8sIGkpID0+IHlNaW4gKyAoaSAvIChzaXplIC0gMSkpICogKHlNYXggLSB5TWluKSlcblxuICAgIGNvbnN0IHN1cmZhY2UgPSBbXVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICBjb25zdCByb3cgPSBbXVxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzaXplOyBqKyspIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0WCA9IHhHcmlkW2pdXG4gICAgICAgIGNvbnN0IHRhcmdldFkgPSB5R3JpZFtpXVxuXG4gICAgICAgIC8vIEludGVycG9sYXRpb24gcG9uZMOpcsOpZSBwYXIgbGEgZGlzdGFuY2VcbiAgICAgICAgbGV0IHdlaWdodGVkU3VtID0gMFxuICAgICAgICBsZXQgdG90YWxXZWlnaHQgPSAwXG4gICAgICAgIGNvbnN0IG1heERpc3RhbmNlID0gTWF0aC5zcXJ0KCh4TWF4IC0geE1pbikgKiogMiArICh5TWF4IC0geU1pbikgKiogMikgLyA1XG5cbiAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBkYXRhLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgY29uc3QgZHggPSB4VmFsdWVzW2tdIC0gdGFyZ2V0WFxuICAgICAgICAgIGNvbnN0IGR5ID0geVZhbHVlc1trXSAtIHRhcmdldFlcbiAgICAgICAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSlcblxuICAgICAgICAgIGlmIChkaXN0YW5jZSA8IG1heERpc3RhbmNlKSB7XG4gICAgICAgICAgICBjb25zdCB3ZWlnaHQgPSBNYXRoLmV4cCgtKGRpc3RhbmNlICogZGlzdGFuY2UpIC8gKG1heERpc3RhbmNlICogbWF4RGlzdGFuY2UpKVxuICAgICAgICAgICAgd2VpZ2h0ZWRTdW0gKz0gelZhbHVlc1trXSAqIHdlaWdodFxuICAgICAgICAgICAgdG90YWxXZWlnaHQgKz0gd2VpZ2h0XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcm93LnB1c2godG90YWxXZWlnaHQgPiAwID8gd2VpZ2h0ZWRTdW0gLyB0b3RhbFdlaWdodCA6IDApXG4gICAgICB9XG4gICAgICBzdXJmYWNlLnB1c2gocm93KVxuICAgIH1cblxuICAgIGNvbnN0IHBsb3REYXRhID0gW1xuICAgICAge1xuICAgICAgICB0eXBlOiBcInN1cmZhY2VcIixcbiAgICAgICAgejogc3VyZmFjZSxcbiAgICAgICAgeDogeEdyaWQsXG4gICAgICAgIHk6IHlHcmlkLFxuICAgICAgICBjb2xvcnNjYWxlOiBcIkVhcnRoXCIsXG4gICAgICAgIGNvbnRvdXJzOiB7XG4gICAgICAgICAgejoge1xuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgIHVzZWNvbG9ybWFwOiB0cnVlLFxuICAgICAgICAgICAgaGlnaGxpZ2h0Y29sb3I6IFwiIzQyZjQ2MlwiLFxuICAgICAgICAgICAgcHJvamVjdDogeyB6OiB0cnVlIH0sXG4gICAgICAgICAgICB3aWR0aDogMixcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBjb2xvcmJhcjoge1xuICAgICAgICAgIHRpdGxlOiBhbmFseXNpcy5tYXBwaW5nLnpBeGlzLFxuICAgICAgICAgIHRpdGxlZm9udDogeyBzaXplOiAxMCB9LFxuICAgICAgICB9LFxuICAgICAgICBuYW1lOiBgU3VyZmFjZSAtICR7ZGF0YS5sZW5ndGh9IHBvaW50cyBzb3VyY2VgLFxuICAgICAgfSxcbiAgICBdXG5cbiAgICBjb25zdCBsYXlvdXQgPSBjcmVhdGVEeW5hbWljTGF5b3V0KFwiU3VyZmFjZSAzRCAtIExpZ25lcyBkZSBOaXZlYXVcIiwgYW5hbHlzaXMpXG4gICAgd2luZG93LlBsb3RseS5uZXdQbG90KHBsb3RSZWYuY3VycmVudCwgcGxvdERhdGEsIGxheW91dCwgZ2V0UGxvdENvbmZpZygpKVxuICB9XG5cbiAgLy8gOC4gSMOJTElDRSBBRE4gLSBCYXPDqWUgc3VyIGxlcyBzw6lxdWVuY2VzIGRlIGRvbm7DqWVzXG4gIGNvbnN0IHJlbmRlckROQUhlbGl4ID0gKGFuYWx5c2lzOiBEYXRhQW5hbHlzaXMpID0+IHtcbiAgICBjb25zdCBjb2xvclZhbHVlcyA9IGdldFZhbHVlc0Zyb21BbmFseXNpcyhhbmFseXNpcywgXCJjb2xvckJ5XCIpXG4gICAgY29uc3Qgc2l6ZVZhbHVlcyA9IGdldFZhbHVlc0Zyb21BbmFseXNpcyhhbmFseXNpcywgXCJzaXplQnlcIilcblxuICAgIGNvbnN0IGRuYVgxID0gW11cbiAgICBjb25zdCBkbmFZMSA9IFtdXG4gICAgY29uc3QgZG5hWjEgPSBbXVxuICAgIGNvbnN0IGRuYVgyID0gW11cbiAgICBjb25zdCBkbmFZMiA9IFtdXG4gICAgY29uc3QgZG5hWjIgPSBbXVxuICAgIGNvbnN0IGRuYUNvbG9ycyA9IFtdXG4gICAgY29uc3QgZG5hU2l6ZXMgPSBbXVxuXG4gICAgLy8gVXRpbGlzZXIgbGVzIHZyYWllcyBkb25uw6llcyBwb3VyIG1vZHVsZXIgbCdow6lsaWNlXG4gICAgY29uc3QgY29sb3JSYW5nZSA9IGFuYWx5c2lzLmRhdGFSYW5nZXNbYW5hbHlzaXMubWFwcGluZy5jb2xvckJ5XVxuICAgIGNvbnN0IHNpemVSYW5nZSA9IGFuYWx5c2lzLmRhdGFSYW5nZXNbYW5hbHlzaXMubWFwcGluZy5zaXplQnldXG5cbiAgICBkYXRhLmZvckVhY2goKHJvdywgaSkgPT4ge1xuICAgICAgY29uc3QgdCA9IChpIC8gZGF0YS5sZW5ndGgpICogOCAqIE1hdGguUElcbiAgICAgIGNvbnN0IHogPSAoaSAvIGRhdGEubGVuZ3RoKSAqIDRcblxuICAgICAgLy8gTW9kdWxhdGlvbiBiYXPDqWUgc3VyIGxlcyBkb25uw6llc1xuICAgICAgY29uc3QgY29sb3JWYWwgPSBjb2xvclZhbHVlc1tpXVxuICAgICAgY29uc3Qgc2l6ZVZhbCA9IHNpemVWYWx1ZXNbaV1cblxuICAgICAgY29uc3QgcmFkaXVzTW9kdWxhdGlvbiA9IGNvbG9yUmFuZ2VcbiAgICAgICAgPyAxICsgKDAuMyAqIChjb2xvclZhbCAtIGNvbG9yUmFuZ2UubWluKSkgLyAoY29sb3JSYW5nZS5tYXggLSBjb2xvclJhbmdlLm1pbilcbiAgICAgICAgOiAxXG4gICAgICBjb25zdCBoZWlnaHRNb2R1bGF0aW9uID0gc2l6ZVJhbmdlID8gKDAuMSAqIChzaXplVmFsIC0gc2l6ZVJhbmdlLm1pbikpIC8gKHNpemVSYW5nZS5tYXggLSBzaXplUmFuZ2UubWluKSA6IDBcblxuICAgICAgLy8gUHJlbWllciBicmluXG4gICAgICBkbmFYMS5wdXNoKE1hdGguY29zKHQpICogcmFkaXVzTW9kdWxhdGlvbilcbiAgICAgIGRuYVkxLnB1c2goTWF0aC5zaW4odCkgKiByYWRpdXNNb2R1bGF0aW9uKVxuICAgICAgZG5hWjEucHVzaCh6ICsgaGVpZ2h0TW9kdWxhdGlvbilcblxuICAgICAgLy8gRGV1eGnDqG1lIGJyaW4gKGTDqWNhbMOpIGRlIM+AKVxuICAgICAgZG5hWDIucHVzaChNYXRoLmNvcyh0ICsgTWF0aC5QSSkgKiByYWRpdXNNb2R1bGF0aW9uKVxuICAgICAgZG5hWTIucHVzaChNYXRoLnNpbih0ICsgTWF0aC5QSSkgKiByYWRpdXNNb2R1bGF0aW9uKVxuICAgICAgZG5hWjIucHVzaCh6ICsgaGVpZ2h0TW9kdWxhdGlvbilcblxuICAgICAgZG5hQ29sb3JzLnB1c2goY29sb3JWYWwpXG4gICAgICBkbmFTaXplcy5wdXNoKE1hdGgubWF4KDQsIE1hdGgubWluKDEwLCAoc2l6ZVZhbCAvIChzaXplUmFuZ2U/Lm1heCB8fCAxKSkgKiA2ICsgNCkpKVxuICAgIH0pXG5cbiAgICBjb25zdCBwbG90RGF0YSA9IFtcbiAgICAgIHtcbiAgICAgICAgdHlwZTogXCJzY2F0dGVyM2RcIixcbiAgICAgICAgbW9kZTogXCJtYXJrZXJzK2xpbmVzXCIsXG4gICAgICAgIHg6IGRuYVgxLFxuICAgICAgICB5OiBkbmFZMSxcbiAgICAgICAgejogZG5hWjEsXG4gICAgICAgIG1hcmtlcjoge1xuICAgICAgICAgIHNpemU6IGRuYVNpemVzLFxuICAgICAgICAgIGNvbG9yOiBkbmFDb2xvcnMsXG4gICAgICAgICAgY29sb3JzY2FsZTogXCJSZFlsQnVcIixcbiAgICAgICAgICBjb2xvcmJhcjoge1xuICAgICAgICAgICAgdGl0bGU6IGFuYWx5c2lzLm1hcHBpbmcuY29sb3JCeSxcbiAgICAgICAgICAgIHRpdGxlZm9udDogeyBzaXplOiAxMCB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGxpbmU6IHsgY29sb3I6IFwicmdiYSgyNTUsIDEwMCwgMTAwLCAwLjgpXCIsIHdpZHRoOiA0IH0sXG4gICAgICAgIG5hbWU6IGBCcmluIEFETiAxIC0gJHtkYXRhLmxlbmd0aH0gYmFzZXNgLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdHlwZTogXCJzY2F0dGVyM2RcIixcbiAgICAgICAgbW9kZTogXCJtYXJrZXJzK2xpbmVzXCIsXG4gICAgICAgIHg6IGRuYVgyLFxuICAgICAgICB5OiBkbmFZMixcbiAgICAgICAgejogZG5hWjIsXG4gICAgICAgIG1hcmtlcjogeyBzaXplOiBkbmFTaXplcywgY29sb3I6IGRuYUNvbG9ycywgY29sb3JzY2FsZTogXCJSZFlsQnVcIiB9LFxuICAgICAgICBsaW5lOiB7IGNvbG9yOiBcInJnYmEoMTAwLCAxMDAsIDI1NSwgMC44KVwiLCB3aWR0aDogNCB9LFxuICAgICAgICBuYW1lOiBgQnJpbiBBRE4gMiAtICR7ZGF0YS5sZW5ndGh9IGJhc2VzYCxcbiAgICAgICAgc2hvd2xlZ2VuZDogZmFsc2UsXG4gICAgICB9LFxuICAgIF1cblxuICAgIGNvbnN0IGxheW91dCA9IGNyZWF0ZUR5bmFtaWNMYXlvdXQoXCJEb3VibGUgSMOpbGljZSBBRE5cIiwgYW5hbHlzaXMpXG4gICAgbGF5b3V0LnNjZW5lLmNhbWVyYSA9IHsgZXllOiB7IHg6IDIsIHk6IDAsIHo6IDEgfSB9XG4gICAgd2luZG93LlBsb3RseS5uZXdQbG90KHBsb3RSZWYuY3VycmVudCwgcGxvdERhdGEsIGxheW91dCwgZ2V0UGxvdENvbmZpZygpKVxuICB9XG5cbiAgLy8gRm9uY3Rpb24gcG91ciBjcsOpZXIgdW4gbGF5b3V0IGR5bmFtaXF1ZSBiYXPDqSBzdXIgbCdhbmFseXNlXG4gIGNvbnN0IGNyZWF0ZUR5bmFtaWNMYXlvdXQgPSAodGl0bGU6IHN0cmluZywgYW5hbHlzaXM6IERhdGFBbmFseXNpcykgPT4ge1xuICAgIGNvbnN0IGRhdGFJbmZvID0gYCR7ZGF0YS5sZW5ndGh9IGVudHLDqWVzIOKAoiAke2FuYWx5c2lzLm51bWVyaWNDb2x1bW5zLmxlbmd0aH0gbnVtLiDigKIgJHthbmFseXNpcy5jYXRlZ29yaWNhbENvbHVtbnMubGVuZ3RofSBjYXQuYFxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHNjZW5lOiB7XG4gICAgICAgIHhheGlzOiB7XG4gICAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICAgIHRleHQ6IGAke2FuYWx5c2lzLm1hcHBpbmcueEF4aXN9ICR7YW5hbHlzaXMuZGF0YVR5cGVzW2FuYWx5c2lzLm1hcHBpbmcueEF4aXNdID8gYCgke2FuYWx5c2lzLmRhdGFUeXBlc1thbmFseXNpcy5tYXBwaW5nLnhBeGlzXX0pYCA6IFwiXCJ9YCxcbiAgICAgICAgICAgIGZvbnQ6IHsgc2l6ZTogMTIsIGNvbG9yOiBcIiNlYTU4MGNcIiB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgc2hvd2JhY2tncm91bmQ6IHRydWUsXG4gICAgICAgICAgYmFja2dyb3VuZGNvbG9yOiBcInJnYmEoMjQwLCAyNDAsIDI0MCwgMC44KVwiLFxuICAgICAgICB9LFxuICAgICAgICB5YXhpczoge1xuICAgICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICB0ZXh0OiBgJHthbmFseXNpcy5tYXBwaW5nLnlBeGlzfSAke2FuYWx5c2lzLmRhdGFUeXBlc1thbmFseXNpcy5tYXBwaW5nLnlBeGlzXSA/IGAoJHthbmFseXNpcy5kYXRhVHlwZXNbYW5hbHlzaXMubWFwcGluZy55QXhpc119KWAgOiBcIlwifWAsXG4gICAgICAgICAgICBmb250OiB7IHNpemU6IDEyLCBjb2xvcjogXCIjZWE1ODBjXCIgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNob3diYWNrZ3JvdW5kOiB0cnVlLFxuICAgICAgICAgIGJhY2tncm91bmRjb2xvcjogXCJyZ2JhKDI0MCwgMjQwLCAyNDAsIDAuOClcIixcbiAgICAgICAgfSxcbiAgICAgICAgemF4aXM6IHtcbiAgICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgdGV4dDogYCR7YW5hbHlzaXMubWFwcGluZy56QXhpc30gJHthbmFseXNpcy5kYXRhVHlwZXNbYW5hbHlzaXMubWFwcGluZy56QXhpc10gPyBgKCR7YW5hbHlzaXMuZGF0YVR5cGVzW2FuYWx5c2lzLm1hcHBpbmcuekF4aXNdfSlgIDogXCJcIn1gLFxuICAgICAgICAgICAgZm9udDogeyBzaXplOiAxMiwgY29sb3I6IFwiI2VhNTgwY1wiIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzaG93YmFja2dyb3VuZDogdHJ1ZSxcbiAgICAgICAgICBiYWNrZ3JvdW5kY29sb3I6IFwicmdiYSgyNDAsIDI0MCwgMjQwLCAwLjgpXCIsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbWVyYTogeyBleWU6IHsgeDogMS4yNSwgeTogMS4yNSwgejogMS4yNSB9IH0sXG4gICAgICB9LFxuICAgICAgdGl0bGU6IHsgdGV4dDogdGl0bGUsIGZvbnQ6IHsgc2l6ZTogMTgsIGNvbG9yOiBcIiNlYTU4MGNcIiB9IH0sXG4gICAgICBwYXBlcl9iZ2NvbG9yOiBcInJnYmEoMCwwLDAsMClcIixcbiAgICAgIG1hcmdpbjogeyBsOiAwLCByOiAwLCB0OiA2MCwgYjogMCB9LFxuICAgICAgYW5ub3RhdGlvbnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHRleHQ6IGA8Yj5Nb2TDqGxlOjwvYj4gJHt0aXRsZX08YnI+PGI+RG9ubsOpZXM6PC9iPiAke2RhdGFJbmZvfTxicj48Yj5NYXBwaW5nOjwvYj48YnI+4oCiIFg6ICR7YW5hbHlzaXMubWFwcGluZy54QXhpc308YnI+4oCiIFk6ICR7YW5hbHlzaXMubWFwcGluZy55QXhpc308YnI+4oCiIFo6ICR7YW5hbHlzaXMubWFwcGluZy56QXhpc308YnI+4oCiIENvdWxldXI6ICR7YW5hbHlzaXMubWFwcGluZy5jb2xvckJ5fTxicj7igKIgVGFpbGxlOiAke2FuYWx5c2lzLm1hcHBpbmcuc2l6ZUJ5fSR7YW5hbHlzaXMubWFwcGluZy5jYXRlZ29yeUJ5ID8gYDxicj7igKIgQ2F0w6lnb3JpZTogJHthbmFseXNpcy5tYXBwaW5nLmNhdGVnb3J5Qnl9YCA6IFwiXCJ9YCxcbiAgICAgICAgICBzaG93YXJyb3c6IGZhbHNlLFxuICAgICAgICAgIHhyZWY6IFwicGFwZXJcIixcbiAgICAgICAgICB5cmVmOiBcInBhcGVyXCIsXG4gICAgICAgICAgeDogLTAuMTUsXG4gICAgICAgICAgeTogMC45NSxcbiAgICAgICAgICB4YW5jaG9yOiBcImxlZnRcIixcbiAgICAgICAgICB5YW5jaG9yOiBcInRvcFwiLFxuICAgICAgICAgIGJnY29sb3I6IFwicmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpXCIsXG4gICAgICAgICAgYm9yZGVyY29sb3I6IFwicmdiYSgyMzQsIDg4LCAxMiwgMC4zKVwiLFxuICAgICAgICAgIGJvcmRlcndpZHRoOiAxLFxuICAgICAgICAgIGZvbnQ6IHsgc2l6ZTogOCwgY29sb3I6IFwiIzY2NlwiIH0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGdldFBsb3RDb25maWcgPSAoKSA9PiAoe1xuICAgIHJlc3BvbnNpdmU6IHRydWUsXG4gICAgZGlzcGxheU1vZGVCYXI6IGZhbHNlLFxuICAgIHN0YXRpY1Bsb3Q6IGZhbHNlLFxuICAgIHNjcm9sbFpvb206IHRydWUsXG4gICAgZG91YmxlQ2xpY2s6IFwicmVzZXRcIixcbiAgfSlcblxuICAvLyByZW5kZXJWMFZpc3VhbGl6YXRpb24gZXN0IG1haW50ZW5hbnQgZMOpZmluaSBhdSBkw6lidXQgZHUgY29tcG9zYW50XG5cbiAgY29uc3QgcmVuZGVyRGVtb1Zpc3VhbGl6YXRpb24gPSAoKSA9PiB7XG4gICAgY29uc3QgZGVtb0RhdGEgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiA1MCB9LCAoXywgaSkgPT4gKHtcbiAgICAgIHg6IE1hdGgucmFuZG9tKCkgKiAxMCxcbiAgICAgIHk6IE1hdGgucmFuZG9tKCkgKiAxMCxcbiAgICAgIHo6IE1hdGgucmFuZG9tKCkgKiAxMCxcbiAgICAgIHZhbHVlOiBNYXRoLnJhbmRvbSgpICogMTAwLFxuICAgICAgY2F0ZWdvcnk6IGBDYXQke01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDUpICsgMX1gLFxuICAgIH0pKVxuXG4gICAgc2V0RGF0YU1hcHBpbmcoe1xuICAgICAgeEF4aXM6IFwiRGltZW5zaW9uIFhcIixcbiAgICAgIHlBeGlzOiBcIkRpbWVuc2lvbiBZXCIsXG4gICAgICB6QXhpczogXCJEaW1lbnNpb24gWlwiLFxuICAgICAgY29sb3JCeTogXCJWYWxldXJcIixcbiAgICAgIHNpemVCeTogXCJWYWxldXJcIixcbiAgICB9KVxuXG4gICAgY29uc3QgcGxvdERhdGEgPSBbXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFwic2NhdHRlcjNkXCIsXG4gICAgICAgIG1vZGU6IFwibWFya2Vyc1wiLFxuICAgICAgICB4OiBkZW1vRGF0YS5tYXAoKGQpID0+IGQueCksXG4gICAgICAgIHk6IGRlbW9EYXRhLm1hcCgoZCkgPT4gZC55KSxcbiAgICAgICAgejogZGVtb0RhdGEubWFwKChkKSA9PiBkLnopLFxuICAgICAgICBtYXJrZXI6IHtcbiAgICAgICAgICBzaXplOiA4LFxuICAgICAgICAgIGNvbG9yOiBkZW1vRGF0YS5tYXAoKGQpID0+IGQudmFsdWUpLFxuICAgICAgICAgIGNvbG9yc2NhbGU6IFwiUmFpbmJvd1wiLFxuICAgICAgICAgIG9wYWNpdHk6IDAuOCxcbiAgICAgICAgfSxcbiAgICAgICAgbmFtZTogXCJEw6ltb25zdHJhdGlvblwiLFxuICAgICAgfSxcbiAgICBdXG5cbiAgICBjb25zdCBsYXlvdXQgPSB7XG4gICAgICBzY2VuZToge1xuICAgICAgICB4YXhpczogeyB0aXRsZTogXCJEaW1lbnNpb24gWFwiLCBzaG93YmFja2dyb3VuZDogdHJ1ZSwgYmFja2dyb3VuZGNvbG9yOiBcInJnYmEoMjQwLCAyNDAsIDI0MCwgMC44KVwiIH0sXG4gICAgICAgIHlheGlzOiB7IHRpdGxlOiBcIkRpbWVuc2lvbiBZXCIsIHNob3diYWNrZ3JvdW5kOiB0cnVlLCBiYWNrZ3JvdW5kY29sb3I6IFwicmdiYSgyNDAsIDI0MCwgMjQwLCAwLjgpXCIgfSxcbiAgICAgICAgemF4aXM6IHsgdGl0bGU6IFwiRGltZW5zaW9uIFpcIiwgc2hvd2JhY2tncm91bmQ6IHRydWUsIGJhY2tncm91bmRjb2xvcjogXCJyZ2JhKDI0MCwgMjQwLCAyNDAsIDAuOClcIiB9LFxuICAgICAgICBjYW1lcmE6IHsgZXllOiB7IHg6IDEuMjUsIHk6IDEuMjUsIHo6IDEuMjUgfSB9LFxuICAgICAgfSxcbiAgICAgIHRpdGxlOiB7IHRleHQ6IGBEw6ltb25zdHJhdGlvbiAtICR7Z2V0TW9kZWxOYW1lKHZpc3VhbGl6YXRpb25UeXBlKX1gLCBmb250OiB7IHNpemU6IDE4LCBjb2xvcjogXCIjZWE1ODBjXCIgfSB9LFxuICAgICAgcGFwZXJfYmdjb2xvcjogXCJyZ2JhKDAsMCwwLDApXCIsXG4gICAgICBtYXJnaW46IHsgbDogMCwgcjogMCwgdDogNjAsIGI6IDAgfSxcbiAgICB9XG5cbiAgICB3aW5kb3cuUGxvdGx5Lm5ld1Bsb3QocGxvdFJlZi5jdXJyZW50LCBwbG90RGF0YSwgbGF5b3V0LCBnZXRQbG90Q29uZmlnKCkpXG4gIH1cblxuICBjb25zdCBnZXRNb2RlbE5hbWUgPSAobW9kZWxJZDogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgbmFtZXM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7XG4gICAgICBzY2F0dGVyM2Q6IFwiTnVhZ2UgM0QgQ2xhc3NpcXVlXCIsXG4gICAgICBzY2F0dGVyX2RlbnNpdHk6IFwiRGVuc2l0w6kgM0RcIixcbiAgICAgIHNjYXR0ZXJfYnViYmxlOiBcIkJ1bGxlcyAzRFwiLFxuICAgICAgbWFuZGFsYV8zZDogXCJNYW5kYWxhIDNEXCIsXG4gICAgICBnYWxheHlfM2Q6IFwiR2FsYXhpZSAzRFwiLFxuICAgICAgc3VyZmFjZV9jb250b3VyOiBcIlN1cmZhY2UgQ29udG91cnNcIixcbiAgICAgIGRuYV9oZWxpeDogXCJIw6lsaWNlIEFETlwiLFxuICAgICAgdGltZWxpbmVfM2Q6IFwiVGltZWxpbmUgM0RcIixcbiAgICB9XG4gICAgcmV0dXJuIG5hbWVzW21vZGVsSWRdIHx8IFwiVmlzdWFsaXNhdGlvbiAzRFwiXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiaC1mdWxsIGJnLWdyYWRpZW50LXRvLWJyIGZyb20tb3JhbmdlLTUwIHRvLXdoaXRlIHJvdW5kZWQteGwgYm9yZGVyLTIgYm9yZGVyLW9yYW5nZS0yMDAgb3ZlcmZsb3ctaGlkZGVuXCI+XG4gICAgICB7LyogSGVhZGVyICovfVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwLTYgYm9yZGVyLWIgYm9yZGVyLW9yYW5nZS0yMDAgYmctd2hpdGVcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWJldHdlZW5cIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIHNwYWNlLXgtM1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LTEyIGgtMTIgYmctZ3JhZGllbnQtdG8tYnIgZnJvbS1vcmFuZ2UtNjAwIHRvLW9yYW5nZS01MDAgcm91bmRlZC14bCBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlclwiPlxuICAgICAgICAgICAgICA8VHJlbmRpbmdVcCBjbGFzc05hbWU9XCJ3LTYgaC02IHRleHQtd2hpdGVcIiAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwidGV4dC14bCBmb250LWJvbGQgdGV4dC1ncmF5LTgwMFwiPkNhbnZhcyBJQSDigKIgVmlzdWFsaXNhdGlvbiBEeW5hbWlxdWU8L2gyPlxuICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNtIHRleHQtZ3JheS02MDBcIj5cbiAgICAgICAgICAgICAgICB7ZGF0YS5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgICA/IGAke2RhdGEubGVuZ3RofSDDqWNoYW50aWxsb25zIOKAoiAke2NvbHVtbnMubGVuZ3RofSB2YXJpYWJsZXMg4oCiICR7Z2V0TW9kZWxOYW1lKGN1cnJlbnRNb2RlbCl9YFxuICAgICAgICAgICAgICAgICAgOiBgTW9kZSBkw6ltb25zdHJhdGlvbiDigKIgJHtnZXRNb2RlbE5hbWUoY3VycmVudE1vZGVsKX1gfVxuICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgIHtkYXRhQW5hbHlzaXMgJiYgKFxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQteHMgdGV4dC1ncmF5LTUwMFwiPlxuICAgICAgICAgICAgICAgICAge2RhdGFBbmFseXNpcy5udW1lcmljQ29sdW1ucy5sZW5ndGh9IG51bcOpcmlxdWVzIOKAoiB7ZGF0YUFuYWx5c2lzLmNhdGVnb3JpY2FsQ29sdW1ucy5sZW5ndGh9e1wiIFwifVxuICAgICAgICAgICAgICAgICAgY2F0w6lnb3JpZWxsZXMg4oCiIHtkYXRhQW5hbHlzaXMudGVtcG9yYWxDb2x1bW5zLmxlbmd0aH0gdGVtcG9yZWxsZXNcbiAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgc3BhY2UteC0yXCI+XG4gICAgICAgICAgICB7aXNWMEdlbmVyYXRlZCAmJiAoXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBweC0zIHB5LTEgcm91bmRlZC1mdWxsIHRleHQteHMgZm9udC1tZWRpdW0gYmctYmx1ZS0xMDAgdGV4dC1ibHVlLTgwMFwiPlxuICAgICAgICAgICAgICAgIDxDb2RlIGNsYXNzTmFtZT1cInctMyBoLTMgbXItMVwiIC8+XG4gICAgICAgICAgICAgICAgR8OpbsOpcsOpIHBhciB2MFxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIHB4LTMgcHktMSByb3VuZGVkLWZ1bGwgdGV4dC14cyBmb250LW1lZGl1bSBiZy1vcmFuZ2UtMTAwIHRleHQtb3JhbmdlLTgwMFwiPlxuICAgICAgICAgICAgICA8WmFwIGNsYXNzTmFtZT1cInctMyBoLTMgbXItMVwiIC8+XG4gICAgICAgICAgICAgIFBsb3RseSB2Mi4zNVxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIHB4LTMgcHktMSByb3VuZGVkLWZ1bGwgdGV4dC14cyBmb250LW1lZGl1bSBiZy1ncmVlbi0xMDAgdGV4dC1ncmVlbi04MDBcIj5cbiAgICAgICAgICAgICAgQWRhcHRhdGlmIER5bmFtaXF1ZVxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICB7LyogQ2FudmFzICovfVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWxhdGl2ZSBoLVtjYWxjKDEwMCUtMTIwcHgpXVwiPlxuICAgICAgICB7IXBsb3RseUxvYWRlZCA/IChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIGgtZnVsbFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctOCBoLTggYm9yZGVyLTIgYm9yZGVyLW9yYW5nZS01MDAgYm9yZGVyLXQtdHJhbnNwYXJlbnQgcm91bmRlZC1mdWxsIGFuaW1hdGUtc3BpbiBteC1hdXRvIG1iLTRcIj48L2Rpdj5cbiAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1ncmF5LTYwMFwiPkNoYXJnZW1lbnQgZGUgUGxvdGx5LmpzIHYyLjM1Li4uPC9wPlxuICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNtIHRleHQtZ3JheS01MDAgbXQtMlwiPkFuYWx5c2UgZHluYW1pcXVlIGRlcyBkb25uw6llcyBlbiBjb3Vycy4uLjwvcD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxkaXYgcmVmPXtwbG90UmVmfSBjbGFzc05hbWU9XCJ3LWZ1bGwgaC1mdWxsXCIgLz5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApXG59XG4iXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlUmVmIiwidXNlU3RhdGUiLCJUcmVuZGluZ1VwIiwiWmFwIiwiQ29kZSIsIkNhbnZhczNEVmlzdWFsaXphdGlvbiIsImRhdGEiLCJjb2x1bW5zIiwidmlzdWFsaXphdGlvblR5cGUiLCJnZW5lcmF0ZWRDb25maWciLCJwbG90UmVmIiwiaXNWMEdlbmVyYXRlZCIsInNldElzVjBHZW5lcmF0ZWQiLCJwbG90bHlMb2FkZWQiLCJzZXRQbG90bHlMb2FkZWQiLCJkYXRhTWFwcGluZyIsInNldERhdGFNYXBwaW5nIiwiY3VycmVudE1vZGVsIiwic2V0Q3VycmVudE1vZGVsIiwiZGF0YUFuYWx5c2lzIiwic2V0RGF0YUFuYWx5c2lzIiwicmVuZGVyVjBWaXN1YWxpemF0aW9uIiwiY29uZmlnIiwicGxvdEVsZW1lbnQiLCJjdXJyZW50IiwicGxvdERhdGEiLCJsYXlvdXQiLCJ3aW5kb3ciLCJQbG90bHkiLCJuZXdQbG90IiwiZ2V0UGxvdENvbmZpZyIsImFuYWx5c2lzIiwiYW5hbHl6ZURhdGFJbnRlbGxpZ2VudGx5IiwicmVuZGVyTW9kZWxTcGVjaWZpY1Zpc3VhbGl6YXRpb24iLCJlcnJvciIsImNvbnNvbGUiLCJyZW5kZXJDbGFzc2ljU2NhdHRlciIsInNjcmlwdCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInNyYyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJ1cGRhdGVWaXN1YWxpemF0aW9uIiwiY2hpbGRyZW4iLCJsZW5ndGgiLCJwdXJnZSIsIm1hcHBpbmciLCJ4QXhpcyIsInlBeGlzIiwiekF4aXMiLCJjb2xvckJ5Iiwic2l6ZUJ5IiwibnVtZXJpY0NvbHVtbnMiLCJjYXRlZ29yaWNhbENvbHVtbnMiLCJ0ZW1wb3JhbENvbHVtbnMiLCJkYXRhUmFuZ2VzIiwiY2F0ZWdvcmllcyIsImRhdGFUeXBlcyIsImZvckVhY2giLCJjb2wiLCJ2YWx1ZXMiLCJtYXAiLCJyb3ciLCJmaWx0ZXIiLCJ2YWwiLCJudW1lcmljVmFsdWVzIiwiTnVtYmVyIiwicGFyc2VGbG9hdCIsImlzTmFOIiwiaXNGaW5pdGUiLCJudW1lcmljUmF0aW8iLCJkYXRlVmFsdWVzIiwiZGF0ZSIsIkRhdGUiLCJnZXRUaW1lIiwiZ2V0RnVsbFllYXIiLCJ0ZW1wb3JhbFJhdGlvIiwidW5pcXVlVmFsdWVzIiwiU2V0IiwidW5pcXVlUmF0aW8iLCJwdXNoIiwidGltZXN0YW1wcyIsIm1pbiIsIk1hdGgiLCJtYXgiLCJzbGljZSIsImFsbE51bWVyaWNDb2xzIiwiY2F0ZWdvcnlCeSIsInJlbmRlckRlbW9WaXN1YWxpemF0aW9uIiwicmVuZGVyQnViYmxlU2NhdHRlciIsInJlbmRlckFuaW1hdGVkU2NhdHRlciIsInJlbmRlckNsdXN0ZXJlZFNjYXR0ZXIiLCJyZW5kZXJEZW5zaXR5U2NhdHRlciIsInJlbmRlckNsYXNzaWNTdXJmYWNlIiwicmVuZGVyQ29udG91clN1cmZhY2UiLCJyZW5kZXJNZXNoU3VyZmFjZSIsInJlbmRlckdyYWRpZW50U3VyZmFjZSIsInJlbmRlckNsYXNzaWNCYXJzIiwicmVuZGVyR3JvdXBlZEJhcnMiLCJyZW5kZXJDeWxpbmRyaWNhbEJhcnMiLCJyZW5kZXJQeXJhbWlkQmFycyIsInJlbmRlclNwaGVyZVBhY2siLCJyZW5kZXJDdWJlTWF0cml4IiwicmVuZGVyQ29uZUZpZWxkIiwicmVuZGVySGVsaXhTcGlyYWwiLCJyZW5kZXJNYW5kYWxhM0QiLCJyZW5kZXJGcmFjdGFsM0QiLCJyZW5kZXJDcnlzdGFsM0QiLCJyZW5kZXJHYWxheHkzRCIsInJlbmRlckROQUhlbGl4IiwicmVuZGVyTmV0d29yazNEIiwicmVuZGVyVHJlZTNEIiwicmVuZGVyVGltZWxpbmUzRCIsInJlbmRlcldhdmVUZW1wb3JhbCIsInJlbmRlclNwaXJhbFRpbWUiLCJyZW5kZXJHbG9iZTNEIiwicmVuZGVyVGVycmFpbjNEIiwicmVuZGVyTW9sZWN1bGUzRCIsInJlbmRlclZlY3RvckZpZWxkIiwicmVuZGVySGlzdG9ncmFtM0QiLCJyZW5kZXJCb3hQbG90M0QiLCJnZXRWYWx1ZXNGcm9tQW5hbHlzaXMiLCJrZXkiLCJjb2x1bW4iLCJfIiwiaSIsImluY2x1ZGVzIiwicmFuZ2UiLCJ0aW1lc3RhbXAiLCJudW1WYWwiLCJpbmRleCIsImluZGV4T2YiLCJ4VmFsdWVzIiwieVZhbHVlcyIsInpWYWx1ZXMiLCJjb2xvclZhbHVlcyIsIm1hcmtlclNpemUiLCJzcXJ0IiwidHlwZSIsIm1vZGUiLCJ4IiwieSIsInoiLCJtYXJrZXIiLCJzaXplIiwiY29sb3IiLCJjb2xvcnNjYWxlIiwib3BhY2l0eSIsImNvbG9yYmFyIiwidGl0bGUiLCJ0aXRsZWZvbnQiLCJ0ZXh0IiwidG9vbHRpcCIsImhvdmVydGVtcGxhdGUiLCJuYW1lIiwiY3JlYXRlRHluYW1pY0xheW91dCIsImdyaWRTaXplIiwieFJhbmdlIiwieVJhbmdlIiwielJhbmdlIiwiZGVuc2l0eVgiLCJkZW5zaXR5WSIsImRlbnNpdHlaIiwiZGVuc2l0eUNvbG9ycyIsImRlbnNpdHlTaXplcyIsInhTcGFuIiwieVNwYW4iLCJ6U3BhbiIsInJhZGl1cyIsImoiLCJrIiwiZGVuc2l0eSIsInAiLCJkeCIsImR5IiwiZHoiLCJkaXN0YW5jZSIsImV4cCIsInRocmVzaG9sZCIsInRvRml4ZWQiLCJzaXplVmFsdWVzIiwibWluU2l6ZSIsIm1heFNpemUiLCJub3JtYWxpemVkU2l6ZXMiLCJ2IiwibGluZSIsIndpZHRoIiwibWFuZGFsYVgiLCJtYW5kYWxhWSIsIm1hbmRhbGFaIiwibWFuZGFsYUNvbG9ycyIsIm1hbmRhbGFTaXplcyIsIm5vcm1hbGl6ZWRJbmRleCIsImNvbG9yVmFsIiwic2l6ZVZhbCIsImNvbG9yUmFuZ2UiLCJ0b3VycyIsImFuZ2xlIiwiUEkiLCJzaW4iLCJoZWlnaHQiLCJjb3MiLCJudW1QZXRhbHMiLCJwZXRhbEFuZ2xlIiwicGV0YWxSYWRpdXMiLCJzY2VuZSIsImNhbWVyYSIsImV5ZSIsImdhbGF4eVgiLCJnYWxheHlZIiwiZ2FsYXh5WiIsImdhbGF4eUNvbG9ycyIsImdhbGF4eVNpemVzIiwic2l6ZVJhbmdlIiwidCIsIm5vcm1hbGl6ZWRDb2xvciIsIm5vcm1hbGl6ZWRTaXplIiwicmFuZG9tIiwiYW5nbGUyIiwicmFkaXVzMiIsImJnY29sb3IiLCJ0aW1lQ29sdW1uIiwidmFsdWVDb2x1bW4iLCJjb2xvckNvbHVtbiIsInRpbWVWYWx1ZXMiLCJzb3J0ZWRJbmRpY2VzIiwic29ydCIsImEiLCJiIiwidGltZWxpbmVYIiwidGltZWxpbmVZIiwidGltZWxpbmVaIiwidGltZWxpbmVDb2xvcnMiLCJ4TWluIiwieE1heCIsInlNaW4iLCJ5TWF4IiwieEdyaWQiLCJBcnJheSIsImZyb20iLCJ5R3JpZCIsInN1cmZhY2UiLCJ0YXJnZXRYIiwidGFyZ2V0WSIsIndlaWdodGVkU3VtIiwidG90YWxXZWlnaHQiLCJtYXhEaXN0YW5jZSIsIndlaWdodCIsImNvbnRvdXJzIiwic2hvdyIsInVzZWNvbG9ybWFwIiwiaGlnaGxpZ2h0Y29sb3IiLCJwcm9qZWN0IiwiZG5hWDEiLCJkbmFZMSIsImRuYVoxIiwiZG5hWDIiLCJkbmFZMiIsImRuYVoyIiwiZG5hQ29sb3JzIiwiZG5hU2l6ZXMiLCJyYWRpdXNNb2R1bGF0aW9uIiwiaGVpZ2h0TW9kdWxhdGlvbiIsInNob3dsZWdlbmQiLCJkYXRhSW5mbyIsInhheGlzIiwiZm9udCIsInNob3diYWNrZ3JvdW5kIiwiYmFja2dyb3VuZGNvbG9yIiwieWF4aXMiLCJ6YXhpcyIsInBhcGVyX2JnY29sb3IiLCJtYXJnaW4iLCJsIiwiciIsImFubm90YXRpb25zIiwic2hvd2Fycm93IiwieHJlZiIsInlyZWYiLCJ4YW5jaG9yIiwieWFuY2hvciIsImJvcmRlcmNvbG9yIiwiYm9yZGVyd2lkdGgiLCJyZXNwb25zaXZlIiwiZGlzcGxheU1vZGVCYXIiLCJzdGF0aWNQbG90Iiwic2Nyb2xsWm9vbSIsImRvdWJsZUNsaWNrIiwiZGVtb0RhdGEiLCJ2YWx1ZSIsImNhdGVnb3J5IiwiZmxvb3IiLCJkIiwiZ2V0TW9kZWxOYW1lIiwibW9kZWxJZCIsIm5hbWVzIiwic2NhdHRlcjNkIiwic2NhdHRlcl9kZW5zaXR5Iiwic2NhdHRlcl9idWJibGUiLCJtYW5kYWxhXzNkIiwiZ2FsYXh5XzNkIiwic3VyZmFjZV9jb250b3VyIiwiZG5hX2hlbGl4IiwidGltZWxpbmVfM2QiLCJkaXYiLCJjbGFzc05hbWUiLCJoMiIsInNwYW4iLCJyZWYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/Canvas3DVisualization.tsx\n"));

/***/ })

});