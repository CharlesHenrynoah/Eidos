"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./components/Canvas3DVisualization.tsx":
/*!**********************************************!*\
  !*** ./components/Canvas3DVisualization.tsx ***!
  \**********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Canvas3DVisualization; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.16_@opentelemetry+api@1.9.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.16_@opentelemetry+api@1.9.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _barrel_optimize_names_Code_TrendingUp_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=Code,TrendingUp,Zap!=!lucide-react */ \"(app-pages-browser)/./node_modules/.pnpm/lucide-react@0.454.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/trending-up.js\");\n/* harmony import */ var _barrel_optimize_names_Code_TrendingUp_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=Code,TrendingUp,Zap!=!lucide-react */ \"(app-pages-browser)/./node_modules/.pnpm/lucide-react@0.454.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/code.js\");\n/* harmony import */ var _barrel_optimize_names_Code_TrendingUp_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=Code,TrendingUp,Zap!=!lucide-react */ \"(app-pages-browser)/./node_modules/.pnpm/lucide-react@0.454.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/zap.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nfunction Canvas3DVisualization(param) {\n    let { data, columns, visualizationType, generatedConfig } = param;\n    _s();\n    const plotRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [isV0Generated, setIsV0Generated] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [plotlyLoaded, setPlotlyLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [dataMapping, setDataMapping] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [currentModel, setCurrentModel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"scatter3d\");\n    const [dataAnalysis, setDataAnalysis] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Charger Plotly.js\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if ( true && !window.Plotly) {\n            const script = document.createElement(\"script\");\n            script.src = \"https://cdn.plot.ly/plotly-2.35.2.min.js\";\n            script.onload = ()=>setPlotlyLoaded(true);\n            script.onerror = ()=>{\n                console.error(\"Erreur lors du chargement de Plotly.js\");\n                setPlotlyLoaded(false);\n            };\n            document.head.appendChild(script);\n        } else if (window.Plotly) {\n            setPlotlyLoaded(true);\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!plotlyLoaded || !plotRef.current) return;\n        const updateVisualization = async ()=>{\n            // Nettoyer le graphique précédent\n            if (plotRef.current.children.length > 0) {\n                window.Plotly.purge(plotRef.current);\n            }\n            setCurrentModel(visualizationType);\n            try {\n                if (generatedConfig) {\n                    await renderV0Visualization(generatedConfig);\n                    setIsV0Generated(true);\n                } else {\n                    await renderModelSpecificVisualization();\n                    setIsV0Generated(false);\n                }\n            } catch (error) {\n                console.error(\"Erreur lors de la mise \\xe0 jour de la visualisation:\", error);\n                // En cas d'erreur, on revient au nuage de points basique\n                renderClassicScatter(analyzeDataIntelligently() || {\n                    mapping: {\n                        xAxis: columns[0] || \"index\",\n                        yAxis: columns[1] || \"index\",\n                        zAxis: columns[2] || \"index\",\n                        colorBy: columns[0] || \"index\",\n                        sizeBy: columns[1] || \"index\"\n                    },\n                    numericColumns: columns,\n                    categoricalColumns: [],\n                    temporalColumns: [],\n                    dataRanges: {},\n                    categories: {},\n                    dataTypes: {}\n                });\n            }\n        };\n        updateVisualization();\n    }, [\n        plotlyLoaded,\n        data,\n        columns,\n        visualizationType,\n        generatedConfig\n    ]);\n    // Analyse complète et intelligente des données\n    const analyzeDataIntelligently = ()=>{\n        if (!data || data.length === 0 || !columns || columns.length === 0) {\n            return null;\n        }\n        const analysis = {\n            mapping: {},\n            numericColumns: [],\n            categoricalColumns: [],\n            temporalColumns: [],\n            dataRanges: {},\n            categories: {},\n            dataTypes: {}\n        };\n        // Analyser chaque colonne en détail\n        columns.forEach((col)=>{\n            const values = data.map((row)=>row[col]).filter((val)=>val != null && val !== \"\");\n            if (values.length === 0) {\n                analysis.dataTypes[col] = \"mixed\";\n                return;\n            }\n            // Test numérique\n            const numericValues = values.map((val)=>Number.parseFloat(val)).filter((val)=>!isNaN(val) && isFinite(val));\n            const numericRatio = numericValues.length / values.length;\n            // Test temporel\n            const dateValues = values.filter((val)=>{\n                const date = new Date(val);\n                return !isNaN(date.getTime()) && date.getFullYear() > 1900 && date.getFullYear() < 2100;\n            });\n            const temporalRatio = dateValues.length / values.length;\n            // Test catégoriel\n            const uniqueValues = [\n                ...new Set(values)\n            ];\n            const uniqueRatio = uniqueValues.length / values.length;\n            // Classification intelligente\n            if (temporalRatio > 0.7) {\n                analysis.dataTypes[col] = \"temporal\";\n                analysis.temporalColumns.push(col);\n                // Convertir en timestamps pour les calculs\n                const timestamps = dateValues.map((val)=>new Date(val).getTime());\n                analysis.dataRanges[col] = {\n                    min: Math.min(...timestamps),\n                    max: Math.max(...timestamps),\n                    values: timestamps\n                };\n            } else if (numericRatio > 0.7) {\n                analysis.dataTypes[col] = \"numeric\";\n                analysis.numericColumns.push(col);\n                analysis.dataRanges[col] = {\n                    min: Math.min(...numericValues),\n                    max: Math.max(...numericValues),\n                    values: numericValues\n                };\n            } else if (uniqueRatio < 0.3 || uniqueValues.length <= 20) {\n                analysis.dataTypes[col] = \"categorical\";\n                analysis.categoricalColumns.push(col);\n                analysis.categories[col] = uniqueValues.slice(0, 20) // Limiter à 20 catégories\n                ;\n            } else {\n                analysis.dataTypes[col] = \"mixed\";\n                if (numericValues.length > 0) {\n                    analysis.dataRanges[col] = {\n                        min: Math.min(...numericValues),\n                        max: Math.max(...numericValues),\n                        values: numericValues\n                    };\n                }\n            }\n        });\n        // Créer un mapping intelligent basé sur les types de données\n        const allNumericCols = [\n            ...analysis.numericColumns,\n            ...analysis.temporalColumns\n        ];\n        if (allNumericCols.length >= 3) {\n            analysis.mapping = {\n                xAxis: allNumericCols[0],\n                yAxis: allNumericCols[1],\n                zAxis: allNumericCols[2],\n                colorBy: allNumericCols[0],\n                sizeBy: allNumericCols.length > 3 ? allNumericCols[3] : allNumericCols[0],\n                categoryBy: analysis.categoricalColumns[0]\n            };\n        } else if (allNumericCols.length === 2) {\n            analysis.mapping = {\n                xAxis: allNumericCols[0],\n                yAxis: allNumericCols[1],\n                zAxis: allNumericCols[0],\n                colorBy: allNumericCols[1],\n                sizeBy: allNumericCols[0],\n                categoryBy: analysis.categoricalColumns[0]\n            };\n        } else if (allNumericCols.length === 1) {\n            analysis.mapping = {\n                xAxis: allNumericCols[0],\n                yAxis: \"index\",\n                zAxis: allNumericCols[0],\n                colorBy: allNumericCols[0],\n                sizeBy: allNumericCols[0],\n                categoryBy: analysis.categoricalColumns[0]\n            };\n        } else {\n            // Utiliser les indices et catégories\n            analysis.mapping = {\n                xAxis: \"index\",\n                yAxis: analysis.categoricalColumns[0] || \"index\",\n                zAxis: \"count\",\n                colorBy: analysis.categoricalColumns[0] || \"index\",\n                sizeBy: \"count\",\n                categoryBy: analysis.categoricalColumns[0]\n            };\n        }\n        return analysis;\n    };\n    // Fonction principale qui route vers la bonne visualisation selon le modèle\n    const renderModelSpecificVisualization = ()=>{\n        if (!data || data.length === 0) {\n            renderDemoVisualization();\n            return;\n        }\n        const analysis = analyzeDataIntelligently();\n        if (!analysis) {\n            renderDemoVisualization();\n            return;\n        }\n        setDataAnalysis(analysis);\n        setDataMapping(analysis.mapping);\n        // Router vers la fonction spécialisée selon le modèle exact\n        switch(visualizationType){\n            // NUAGES\n            case \"scatter3d\":\n                renderClassicScatter(analysis);\n                break;\n            case \"scatter_bubble\":\n                renderBubbleScatter(analysis);\n                break;\n            case \"scatter_animated\":\n                renderAnimatedScatter(analysis);\n                break;\n            case \"scatter_clustered\":\n                renderClusteredScatter(analysis);\n                break;\n            case \"scatter_density\":\n                renderDensityScatter(analysis);\n                break;\n            // SURFACES\n            case \"surface3d\":\n                renderClassicSurface(analysis);\n                break;\n            case \"surface_contour\":\n                renderContourSurface(analysis);\n                break;\n            case \"surface_mesh\":\n                renderMeshSurface(analysis);\n                break;\n            case \"surface_gradient\":\n                renderGradientSurface(analysis);\n                break;\n            // ARCHITECTURE\n            case \"bars3d\":\n                renderClassicBars(analysis);\n                break;\n            case \"bars_grouped\":\n                renderGroupedBars(analysis);\n                break;\n            case \"bars_cylindrical\":\n                renderCylindricalBars(analysis);\n                break;\n            case \"bars_pyramid\":\n                renderPyramidBars(analysis);\n                break;\n            // GÉOMÉTRIQUES\n            case \"sphere_pack\":\n                renderSpherePack(analysis);\n                break;\n            case \"cube_matrix\":\n                renderCubeMatrix(analysis);\n                break;\n            case \"cone_field\":\n                renderConeField(analysis);\n                break;\n            case \"helix_spiral\":\n                renderHelixSpiral(analysis);\n                break;\n            // ARTISTIQUES\n            case \"mandala_3d\":\n                renderMandala3D(analysis);\n                break;\n            case \"fractal_3d\":\n                renderFractal3D(analysis);\n                break;\n            case \"crystal_3d\":\n                renderCrystal3D(analysis);\n                break;\n            case \"galaxy_3d\":\n                renderGalaxy3D(analysis);\n                break;\n            case \"dna_helix\":\n                renderDNAHelix(analysis);\n                break;\n            // RÉSEAUX\n            case \"network_3d\":\n                renderNetwork3D(analysis);\n                break;\n            case \"tree_3d\":\n                renderTree3D(analysis);\n                break;\n            // TEMPORELS\n            case \"timeline_3d\":\n                renderTimeline3D(analysis);\n                break;\n            case \"wave_temporal\":\n                renderWaveTemporal(analysis);\n                break;\n            case \"spiral_time\":\n                renderSpiralTime(analysis);\n                break;\n            // GÉOGRAPHIQUES\n            case \"globe_3d\":\n                renderGlobe3D(analysis);\n                break;\n            case \"terrain_3d\":\n                renderTerrain3D(analysis);\n                break;\n            // SCIENTIFIQUES\n            case \"molecule_3d\":\n                renderMolecule3D(analysis);\n                break;\n            case \"vector_field\":\n                renderVectorField(analysis);\n                break;\n            // STATISTIQUES\n            case \"histogram_3d\":\n                renderHistogram3D(analysis);\n                break;\n            case \"box_plot_3d\":\n                renderBoxPlot3D(analysis);\n                break;\n            default:\n                renderClassicScatter(analysis);\n        }\n    };\n    // Fonction utilitaire pour extraire les valeurs avec l'analyse\n    const getValuesFromAnalysis = (analysis, key)=>{\n        const column = analysis.mapping[key];\n        if (column === \"index\") {\n            return data.map((_, i)=>i);\n        } else if (column === \"count\") {\n            return data.map(()=>1);\n        } else if (column && columns.includes(column)) {\n            if (analysis.dataRanges[column]) {\n                // Utiliser les valeurs pré-calculées pour les colonnes numériques/temporelles\n                const range = analysis.dataRanges[column];\n                return data.map((row, i)=>{\n                    const val = row[column];\n                    if (analysis.dataTypes[column] === \"temporal\") {\n                        const timestamp = new Date(val).getTime();\n                        return isNaN(timestamp) ? range.min : timestamp;\n                    } else {\n                        const numVal = Number.parseFloat(val);\n                        return !isNaN(numVal) && isFinite(numVal) ? numVal : range.min;\n                    }\n                });\n            } else if (analysis.categories[column]) {\n                // Convertir les catégories en indices numériques\n                const categories = analysis.categories[column];\n                return data.map((row)=>{\n                    const val = row[column];\n                    const index = categories.indexOf(val);\n                    return index >= 0 ? index : 0;\n                });\n            }\n        }\n        return data.map((_, i)=>i);\n    };\n    // VISUALISATIONS SPÉCIALISÉES AVEC DONNÉES DYNAMIQUES\n    // 1. NUAGE CLASSIQUE - Adapté aux données\n    const renderClassicScatter = (analysis)=>{\n        const xValues = getValuesFromAnalysis(analysis, \"xAxis\");\n        const yValues = getValuesFromAnalysis(analysis, \"yAxis\");\n        const zValues = getValuesFromAnalysis(analysis, \"zAxis\");\n        const colorValues = getValuesFromAnalysis(analysis, \"colorBy\");\n        // Adapter la taille des marqueurs selon la densité des données\n        const markerSize = Math.max(3, Math.min(12, 100 / Math.sqrt(data.length)));\n        const plotData = [\n            {\n                type: \"scatter3d\",\n                mode: \"markers\",\n                x: xValues,\n                y: yValues,\n                z: zValues,\n                marker: {\n                    size: markerSize,\n                    color: colorValues,\n                    colorscale: \"Viridis\",\n                    opacity: Math.max(0.6, 1 - data.length / 1000),\n                    colorbar: {\n                        title: analysis.mapping.colorBy,\n                        titlefont: {\n                            size: 10\n                        }\n                    }\n                },\n                text: data.map((row, i)=>{\n                    let tooltip = \"<b>Point \".concat(i + 1, \"</b><br>\");\n                    tooltip += \"<b>\".concat(analysis.mapping.xAxis, \":</b> \").concat(row[analysis.mapping.xAxis] || \"N/A\", \"<br>\");\n                    tooltip += \"<b>\".concat(analysis.mapping.yAxis, \":</b> \").concat(row[analysis.mapping.yAxis] || \"N/A\", \"<br>\");\n                    tooltip += \"<b>\".concat(analysis.mapping.zAxis, \":</b> \").concat(row[analysis.mapping.zAxis] || \"N/A\", \"<br>\");\n                    if (analysis.mapping.categoryBy && row[analysis.mapping.categoryBy]) {\n                        tooltip += \"<b>\".concat(analysis.mapping.categoryBy, \":</b> \").concat(row[analysis.mapping.categoryBy], \"<br>\");\n                    }\n                    return tooltip;\n                }),\n                hovertemplate: \"%{text}<extra></extra>\",\n                name: \"Nuage 3D - \".concat(data.length, \" points\")\n            }\n        ];\n        const layout = createDynamicLayout(\"Nuage 3D Classique\", analysis);\n        window.Plotly.newPlot(plotRef.current, plotData, layout, getPlotConfig());\n    };\n    // 2. DENSITÉ 3D - Vraie densité basée sur les données réelles\n    const renderDensityScatter = (analysis)=>{\n        const xValues = getValuesFromAnalysis(analysis, \"xAxis\");\n        const yValues = getValuesFromAnalysis(analysis, \"yAxis\");\n        const zValues = getValuesFromAnalysis(analysis, \"zAxis\");\n        // Adapter la résolution de la grille selon le nombre de données\n        const gridSize = Math.min(25, Math.max(10, Math.sqrt(data.length)));\n        const xRange = analysis.dataRanges[analysis.mapping.xAxis];\n        const yRange = analysis.dataRanges[analysis.mapping.yAxis];\n        const zRange = analysis.dataRanges[analysis.mapping.zAxis];\n        if (!xRange || !yRange || !zRange) {\n            renderClassicScatter(analysis);\n            return;\n        }\n        const densityX = [];\n        const densityY = [];\n        const densityZ = [];\n        const densityColors = [];\n        const densitySizes = [];\n        // Calculer le rayon adaptatif basé sur les vraies données\n        const xSpan = xRange.max - xRange.min;\n        const ySpan = yRange.max - yRange.min;\n        const zSpan = zRange.max - zRange.min;\n        const radius = Math.max(xSpan, ySpan, zSpan) / (gridSize * 0.8);\n        for(let i = 0; i < gridSize; i++){\n            for(let j = 0; j < gridSize; j++){\n                for(let k = 0; k < gridSize; k++){\n                    const x = xRange.min + i / (gridSize - 1) * xSpan;\n                    const y = yRange.min + j / (gridSize - 1) * ySpan;\n                    const z = zRange.min + k / (gridSize - 1) * zSpan;\n                    // Calculer la densité locale avec les vraies données\n                    let density = 0;\n                    for(let p = 0; p < data.length; p++){\n                        const dx = xValues[p] - x;\n                        const dy = yValues[p] - y;\n                        const dz = zValues[p] - z;\n                        const distance = Math.sqrt(dx * dx + dy * dy + dz * dz);\n                        if (distance < radius) {\n                            density += Math.exp(-(distance * distance) / (radius * radius));\n                        }\n                    }\n                    // Seuil adaptatif basé sur la densité moyenne\n                    const threshold = data.length / (gridSize * gridSize * gridSize) * 0.5;\n                    if (density > threshold) {\n                        densityX.push(x);\n                        densityY.push(y);\n                        densityZ.push(z);\n                        densityColors.push(density);\n                        densitySizes.push(Math.max(4, Math.min(20, density * 15)));\n                    }\n                }\n            }\n        }\n        const plotData = [\n            {\n                type: \"scatter3d\",\n                mode: \"markers\",\n                x: densityX,\n                y: densityY,\n                z: densityZ,\n                marker: {\n                    size: densitySizes,\n                    color: densityColors,\n                    colorscale: \"Hot\",\n                    opacity: 0.7,\n                    colorbar: {\n                        title: \"Densit\\xe9 Locale\",\n                        titlefont: {\n                            size: 10\n                        }\n                    }\n                },\n                text: densityX.map((_, i)=>\"<b>Zone Dense \".concat(i + 1, \"</b><br>Densit\\xe9: \").concat(densityColors[i].toFixed(2), \"<br>Position: (\").concat(densityX[i].toFixed(1), \", \").concat(densityY[i].toFixed(1), \", \").concat(densityZ[i].toFixed(1), \")\")),\n                hovertemplate: \"%{text}<extra></extra>\",\n                name: \"Densit\\xe9 3D - \".concat(densityX.length, \" zones\")\n            }\n        ];\n        const layout = createDynamicLayout(\"Densit\\xe9 3D - Zones de Concentration\", analysis);\n        window.Plotly.newPlot(plotRef.current, plotData, layout, getPlotConfig());\n    };\n    // 3. BULLES 3D - Tailles vraiment proportionnelles aux données\n    const renderBubbleScatter = (analysis)=>{\n        const xValues = getValuesFromAnalysis(analysis, \"xAxis\");\n        const yValues = getValuesFromAnalysis(analysis, \"yAxis\");\n        const zValues = getValuesFromAnalysis(analysis, \"zAxis\");\n        const colorValues = getValuesFromAnalysis(analysis, \"colorBy\");\n        const sizeValues = getValuesFromAnalysis(analysis, \"sizeBy\");\n        // Normaliser les tailles basées sur les vraies données\n        const sizeRange = analysis.dataRanges[analysis.mapping.sizeBy];\n        const normalizedSizes = sizeRange ? sizeValues.map((val)=>{\n            const normalized = (val - sizeRange.min) / (sizeRange.max - sizeRange.min);\n            return Math.max(5, Math.min(25, normalized * 20 + 5));\n        }) : sizeValues.map(()=>10);\n        const plotData = [\n            {\n                type: \"scatter3d\",\n                mode: \"markers\",\n                x: xValues,\n                y: yValues,\n                z: zValues,\n                marker: {\n                    size: normalizedSizes,\n                    color: colorValues,\n                    colorscale: \"Plasma\",\n                    opacity: 0.75,\n                    colorbar: {\n                        title: analysis.mapping.colorBy,\n                        titlefont: {\n                            size: 10\n                        }\n                    },\n                    line: {\n                        color: \"rgba(255, 255, 255, 0.3)\",\n                        width: 1\n                    }\n                },\n                text: data.map((row, i)=>{\n                    let tooltip = \"<b>Bulle \".concat(i + 1, \"</b><br>\");\n                    tooltip += \"<b>Taille (\".concat(analysis.mapping.sizeBy, \"):</b> \").concat(row[analysis.mapping.sizeBy] || \"N/A\", \"<br>\");\n                    tooltip += \"<b>Couleur (\".concat(analysis.mapping.colorBy, \"):</b> \").concat(row[analysis.mapping.colorBy] || \"N/A\", \"<br>\");\n                    if (analysis.mapping.categoryBy && row[analysis.mapping.categoryBy]) {\n                        tooltip += \"<b>Cat\\xe9gorie:</b> \".concat(row[analysis.mapping.categoryBy], \"<br>\");\n                    }\n                    return tooltip;\n                }),\n                hovertemplate: \"%{text}<extra></extra>\",\n                name: \"Bulles 3D - \".concat(data.length, \" \\xe9l\\xe9ments\")\n            }\n        ];\n        const layout = createDynamicLayout(\"Bulles 3D - Tailles Proportionnelles\", analysis);\n        window.Plotly.newPlot(plotRef.current, plotData, layout, getPlotConfig());\n    };\n    // 4. MANDALA 3D - Basé sur les patterns des données\n    const renderMandala3D = (analysis)=>{\n        const colorValues = getValuesFromAnalysis(analysis, \"colorBy\");\n        const sizeValues = getValuesFromAnalysis(analysis, \"sizeBy\");\n        const mandalaX = [];\n        const mandalaY = [];\n        const mandalaZ = [];\n        const mandalaColors = [];\n        const mandalaSizes = [];\n        // Utiliser les vraies données pour créer les patterns\n        data.forEach((row, i)=>{\n            const normalizedIndex = i / data.length;\n            const colorVal = colorValues[i];\n            const sizeVal = sizeValues[i];\n            // Nombre de tours basé sur la variance des données\n            const colorRange = analysis.dataRanges[analysis.mapping.colorBy];\n            const tours = colorRange ? 4 + (colorVal - colorRange.min) / (colorRange.max - colorRange.min) * 4 : 6;\n            const angle = normalizedIndex * tours * Math.PI;\n            const radius = 1 + Math.sin(angle * 3) * 0.5;\n            const height = Math.sin(angle * 2) * 0.3;\n            // Point principal\n            mandalaX.push(Math.cos(angle) * radius);\n            mandalaY.push(Math.sin(angle) * radius);\n            mandalaZ.push(height);\n            mandalaColors.push(colorVal);\n            mandalaSizes.push(Math.max(3, Math.min(8, sizeVal / ((colorRange === null || colorRange === void 0 ? void 0 : colorRange.max) || 1) * 6 + 3)));\n            // Pétales basés sur les catégories\n            const numPetals = analysis.mapping.categoryBy && analysis.categories[analysis.mapping.categoryBy] ? Math.min(6, analysis.categories[analysis.mapping.categoryBy].length) : 5;\n            for(let j = 0; j < numPetals; j++){\n                const petalAngle = angle + j * 2 * Math.PI / numPetals;\n                const petalRadius = radius * 0.3;\n                mandalaX.push(Math.cos(angle) * radius + Math.cos(petalAngle) * petalRadius);\n                mandalaY.push(Math.sin(angle) * radius + Math.sin(petalAngle) * petalRadius);\n                mandalaZ.push(height + Math.sin(petalAngle * 2) * 0.1);\n                mandalaColors.push(colorVal * 0.8);\n                mandalaSizes.push(Math.max(2, mandalaSizes[mandalaSizes.length - 1] * 0.6));\n            }\n        });\n        const plotData = [\n            {\n                type: \"scatter3d\",\n                mode: \"markers\",\n                x: mandalaX,\n                y: mandalaY,\n                z: mandalaZ,\n                marker: {\n                    size: mandalaSizes,\n                    color: mandalaColors,\n                    colorscale: \"Rainbow\",\n                    opacity: 0.8,\n                    colorbar: {\n                        title: \"Harmonie (\".concat(analysis.mapping.colorBy, \")\"),\n                        titlefont: {\n                            size: 10\n                        }\n                    }\n                },\n                name: \"Mandala 3D - \".concat(data.length, \" \\xe9l\\xe9ments source\")\n            }\n        ];\n        const layout = createDynamicLayout(\"Mandala 3D - Motifs Sacr\\xe9s\", analysis);\n        layout.scene.camera = {\n            eye: {\n                x: 0,\n                y: 0,\n                z: 2.5\n            }\n        };\n        window.Plotly.newPlot(plotRef.current, plotData, layout, getPlotConfig());\n    };\n    // 5. GALAXIE 3D - Structure basée sur les données\n    const renderGalaxy3D = (analysis)=>{\n        const colorValues = getValuesFromAnalysis(analysis, \"colorBy\");\n        const sizeValues = getValuesFromAnalysis(analysis, \"sizeBy\");\n        const galaxyX = [];\n        const galaxyY = [];\n        const galaxyZ = [];\n        const galaxyColors = [];\n        const galaxySizes = [];\n        // Analyser la distribution pour créer les bras galactiques\n        const colorRange = analysis.dataRanges[analysis.mapping.colorBy];\n        const sizeRange = analysis.dataRanges[analysis.mapping.sizeBy];\n        data.forEach((row, i)=>{\n            const t = i / data.length;\n            const colorVal = colorValues[i];\n            const sizeVal = sizeValues[i];\n            // Position dans la galaxie basée sur les valeurs des données\n            const normalizedColor = colorRange ? (colorVal - colorRange.min) / (colorRange.max - colorRange.min) : t;\n            const normalizedSize = sizeRange ? (sizeVal - sizeRange.min) / (sizeRange.max - sizeRange.min) : 0.5;\n            // Angle et rayon basés sur les données\n            const angle = normalizedColor * 6 * Math.PI + t * 2 * Math.PI;\n            const radius = normalizedSize * 3 + t * 0.5;\n            const height = (Math.random() - 0.5) * 0.2 * (1 - t // Plus plat vers l'extérieur\n            );\n            // Bras principal\n            galaxyX.push(Math.cos(angle) * radius);\n            galaxyY.push(Math.sin(angle) * radius);\n            galaxyZ.push(height);\n            galaxyColors.push(colorVal);\n            galaxySizes.push(Math.max(2, Math.min(12, (1 - normalizedSize) * 8 + 3)));\n            // Bras secondaire si assez de données\n            if (data.length > 20) {\n                const angle2 = angle + Math.PI * 0.8;\n                const radius2 = radius * 0.7;\n                galaxyX.push(Math.cos(angle2) * radius2);\n                galaxyY.push(Math.sin(angle2) * radius2);\n                galaxyZ.push(height * 0.5);\n                galaxyColors.push(colorVal * 0.8);\n                galaxySizes.push(Math.max(1, galaxySizes[galaxySizes.length - 1] * 0.7));\n            }\n        });\n        const plotData = [\n            {\n                type: \"scatter3d\",\n                mode: \"markers\",\n                x: galaxyX,\n                y: galaxyY,\n                z: galaxyZ,\n                marker: {\n                    size: galaxySizes,\n                    color: galaxyColors,\n                    colorscale: \"Viridis\",\n                    opacity: 0.8,\n                    colorbar: {\n                        title: \"Luminosit\\xe9 (\".concat(analysis.mapping.colorBy, \")\"),\n                        titlefont: {\n                            size: 10\n                        }\n                    }\n                },\n                name: \"Galaxie 3D - \".concat(data.length, \" \\xe9toiles\")\n            }\n        ];\n        const layout = createDynamicLayout(\"Galaxie 3D - Spirale Cosmique\", analysis);\n        layout.scene.bgcolor = \"rgba(0, 0, 20, 0.9)\";\n        layout.scene.camera = {\n            eye: {\n                x: 1.5,\n                y: 1.5,\n                z: 1\n            }\n        };\n        window.Plotly.newPlot(plotRef.current, plotData, layout, getPlotConfig());\n    };\n    // 6. TIMELINE 3D - Pour données temporelles\n    const renderTimeline3D = (analysis)=>{\n        // Chercher une colonne temporelle\n        const timeColumn = analysis.temporalColumns[0] || analysis.mapping.xAxis;\n        const valueColumn = analysis.mapping.yAxis;\n        const colorColumn = analysis.mapping.colorBy;\n        const timeValues = getValuesFromAnalysis(analysis, \"xAxis\");\n        const values = getValuesFromAnalysis(analysis, \"yAxis\");\n        const colorValues = getValuesFromAnalysis(analysis, \"colorBy\");\n        // Trier par temps si c'est temporel\n        const sortedIndices = timeValues.map((_, i)=>i).sort((a, b)=>timeValues[a] - timeValues[b]);\n        const timelineX = sortedIndices.map((i)=>timeValues[i]);\n        const timelineY = sortedIndices.map((i)=>values[i]);\n        const timelineZ = sortedIndices.map((_, i)=>i * 0.1) // Élévation progressive\n        ;\n        const timelineColors = sortedIndices.map((i)=>colorValues[i]);\n        const plotData = [\n            {\n                type: \"scatter3d\",\n                mode: \"markers+lines\",\n                x: timelineX,\n                y: timelineY,\n                z: timelineZ,\n                marker: {\n                    size: 6,\n                    color: timelineColors,\n                    colorscale: \"Viridis\",\n                    opacity: 0.8,\n                    colorbar: {\n                        title: analysis.mapping.colorBy,\n                        titlefont: {\n                            size: 10\n                        }\n                    }\n                },\n                line: {\n                    color: \"rgba(100, 100, 100, 0.6)\",\n                    width: 3\n                },\n                text: sortedIndices.map((i)=>{\n                    const row = data[i];\n                    let tooltip = \"<b>Point temporel \".concat(i + 1, \"</b><br>\");\n                    tooltip += \"<b>Temps:</b> \".concat(row[timeColumn] || \"N/A\", \"<br>\");\n                    tooltip += \"<b>Valeur:</b> \".concat(row[valueColumn] || \"N/A\", \"<br>\");\n                    return tooltip;\n                }),\n                hovertemplate: \"%{text}<extra></extra>\",\n                name: \"Timeline 3D - \".concat(data.length, \" points\")\n            }\n        ];\n        const layout = createDynamicLayout(\"Timeline 3D - \\xc9volution Temporelle\", analysis);\n        window.Plotly.newPlot(plotRef.current, plotData, layout, getPlotConfig());\n    };\n    // Fonctions de rendu simplifiées pour les autres modèles\n    const renderAnimatedScatter = (analysis)=>renderClassicScatter(analysis);\n    const renderClusteredScatter = (analysis)=>renderBubbleScatter(analysis);\n    const renderClassicSurface = (analysis)=>renderContourSurface(analysis);\n    const renderMeshSurface = (analysis)=>renderContourSurface(analysis);\n    const renderGradientSurface = (analysis)=>renderContourSurface(analysis);\n    const renderClassicBars = (analysis)=>renderBubbleScatter(analysis);\n    const renderGroupedBars = (analysis)=>renderBubbleScatter(analysis);\n    const renderCylindricalBars = (analysis)=>renderBubbleScatter(analysis);\n    const renderPyramidBars = (analysis)=>renderBubbleScatter(analysis);\n    const renderSpherePack = (analysis)=>renderBubbleScatter(analysis);\n    const renderCubeMatrix = (analysis)=>renderClassicScatter(analysis);\n    const renderConeField = (analysis)=>renderClassicScatter(analysis);\n    const renderHelixSpiral = (analysis)=>renderDNAHelix(analysis);\n    const renderFractal3D = (analysis)=>renderMandala3D(analysis);\n    const renderCrystal3D = (analysis)=>renderClassicScatter(analysis);\n    const renderNetwork3D = (analysis)=>renderClassicScatter(analysis);\n    const renderTree3D = (analysis)=>renderClassicScatter(analysis);\n    const renderWaveTemporal = (analysis)=>renderTimeline3D(analysis);\n    const renderSpiralTime = (analysis)=>renderTimeline3D(analysis);\n    const renderGlobe3D = (analysis)=>renderClassicScatter(analysis);\n    const renderTerrain3D = (analysis)=>renderContourSurface(analysis);\n    const renderMolecule3D = (analysis)=>renderClassicScatter(analysis);\n    const renderVectorField = (analysis)=>renderClassicScatter(analysis);\n    const renderHistogram3D = (analysis)=>renderBubbleScatter(analysis);\n    const renderBoxPlot3D = (analysis)=>renderBubbleScatter(analysis);\n    // 7. SURFACE AVEC CONTOURS - Basée sur les vraies données\n    const renderContourSurface = (analysis)=>{\n        const xValues = getValuesFromAnalysis(analysis, \"xAxis\");\n        const yValues = getValuesFromAnalysis(analysis, \"yAxis\");\n        const zValues = getValuesFromAnalysis(analysis, \"zAxis\");\n        const xRange = analysis.dataRanges[analysis.mapping.xAxis];\n        const yRange = analysis.dataRanges[analysis.mapping.yAxis];\n        if (!xRange || !yRange) {\n            renderClassicScatter(analysis);\n            return;\n        }\n        // Adapter la résolution selon la densité des données\n        const size = Math.min(30, Math.max(15, Math.sqrt(data.length)));\n        const xMin = xRange.min;\n        const xMax = xRange.max;\n        const yMin = yRange.min;\n        const yMax = yRange.max;\n        const xGrid = Array.from({\n            length: size\n        }, (_, i)=>xMin + i / (size - 1) * (xMax - xMin));\n        const yGrid = Array.from({\n            length: size\n        }, (_, i)=>yMin + i / (size - 1) * (yMax - yMin));\n        const surface = [];\n        for(let i = 0; i < size; i++){\n            const row = [];\n            for(let j = 0; j < size; j++){\n                const targetX = xGrid[j];\n                const targetY = yGrid[i];\n                // Interpolation pondérée par la distance\n                let weightedSum = 0;\n                let totalWeight = 0;\n                const maxDistance = Math.sqrt((xMax - xMin) ** 2 + (yMax - yMin) ** 2) / 5;\n                for(let k = 0; k < data.length; k++){\n                    const dx = xValues[k] - targetX;\n                    const dy = yValues[k] - targetY;\n                    const distance = Math.sqrt(dx * dx + dy * dy);\n                    if (distance < maxDistance) {\n                        const weight = Math.exp(-(distance * distance) / (maxDistance * maxDistance));\n                        weightedSum += zValues[k] * weight;\n                        totalWeight += weight;\n                    }\n                }\n                row.push(totalWeight > 0 ? weightedSum / totalWeight : 0);\n            }\n            surface.push(row);\n        }\n        const plotData = [\n            {\n                type: \"surface\",\n                z: surface,\n                x: xGrid,\n                y: yGrid,\n                colorscale: \"Earth\",\n                contours: {\n                    z: {\n                        show: true,\n                        usecolormap: true,\n                        highlightcolor: \"#42f462\",\n                        project: {\n                            z: true\n                        },\n                        width: 2\n                    }\n                },\n                colorbar: {\n                    title: analysis.mapping.zAxis,\n                    titlefont: {\n                        size: 10\n                    }\n                },\n                name: \"Surface - \".concat(data.length, \" points source\")\n            }\n        ];\n        const layout = createDynamicLayout(\"Surface 3D - Lignes de Niveau\", analysis);\n        window.Plotly.newPlot(plotRef.current, plotData, layout, getPlotConfig());\n    };\n    // 8. HÉLICE ADN - Basée sur les séquences de données\n    const renderDNAHelix = (analysis)=>{\n        const colorValues = getValuesFromAnalysis(analysis, \"colorBy\");\n        const sizeValues = getValuesFromAnalysis(analysis, \"sizeBy\");\n        const dnaX1 = [];\n        const dnaY1 = [];\n        const dnaZ1 = [];\n        const dnaX2 = [];\n        const dnaY2 = [];\n        const dnaZ2 = [];\n        const dnaColors = [];\n        const dnaSizes = [];\n        // Utiliser les vraies données pour moduler l'hélice\n        const colorRange = analysis.dataRanges[analysis.mapping.colorBy];\n        const sizeRange = analysis.dataRanges[analysis.mapping.sizeBy];\n        data.forEach((row, i)=>{\n            const t = i / data.length * 8 * Math.PI;\n            const z = i / data.length * 4;\n            // Modulation basée sur les données\n            const colorVal = colorValues[i];\n            const sizeVal = sizeValues[i];\n            const radiusModulation = colorRange ? 1 + 0.3 * (colorVal - colorRange.min) / (colorRange.max - colorRange.min) : 1;\n            const heightModulation = sizeRange ? 0.1 * (sizeVal - sizeRange.min) / (sizeRange.max - sizeRange.min) : 0;\n            // Premier brin\n            dnaX1.push(Math.cos(t) * radiusModulation);\n            dnaY1.push(Math.sin(t) * radiusModulation);\n            dnaZ1.push(z + heightModulation);\n            // Deuxième brin (décalé de π)\n            dnaX2.push(Math.cos(t + Math.PI) * radiusModulation);\n            dnaY2.push(Math.sin(t + Math.PI) * radiusModulation);\n            dnaZ2.push(z + heightModulation);\n            dnaColors.push(colorVal);\n            dnaSizes.push(Math.max(4, Math.min(10, sizeVal / ((sizeRange === null || sizeRange === void 0 ? void 0 : sizeRange.max) || 1) * 6 + 4)));\n        });\n        const plotData = [\n            {\n                type: \"scatter3d\",\n                mode: \"markers+lines\",\n                x: dnaX1,\n                y: dnaY1,\n                z: dnaZ1,\n                marker: {\n                    size: dnaSizes,\n                    color: dnaColors,\n                    colorscale: \"RdYlBu\",\n                    colorbar: {\n                        title: analysis.mapping.colorBy,\n                        titlefont: {\n                            size: 10\n                        }\n                    }\n                },\n                line: {\n                    color: \"rgba(255, 100, 100, 0.8)\",\n                    width: 4\n                },\n                name: \"Brin ADN 1 - \".concat(data.length, \" bases\")\n            },\n            {\n                type: \"scatter3d\",\n                mode: \"markers+lines\",\n                x: dnaX2,\n                y: dnaY2,\n                z: dnaZ2,\n                marker: {\n                    size: dnaSizes,\n                    color: dnaColors,\n                    colorscale: \"RdYlBu\"\n                },\n                line: {\n                    color: \"rgba(100, 100, 255, 0.8)\",\n                    width: 4\n                },\n                name: \"Brin ADN 2 - \".concat(data.length, \" bases\"),\n                showlegend: false\n            }\n        ];\n        const layout = createDynamicLayout(\"Double H\\xe9lice ADN\", analysis);\n        layout.scene.camera = {\n            eye: {\n                x: 2,\n                y: 0,\n                z: 1\n            }\n        };\n        window.Plotly.newPlot(plotRef.current, plotData, layout, getPlotConfig());\n    };\n    // Fonction pour créer un layout dynamique basé sur l'analyse\n    const createDynamicLayout = (title, analysis)=>{\n        const dataInfo = \"\".concat(data.length, \" entr\\xe9es • \").concat(analysis.numericColumns.length, \" num. • \").concat(analysis.categoricalColumns.length, \" cat.\");\n        return {\n            scene: {\n                xaxis: {\n                    title: {\n                        text: \"\".concat(analysis.mapping.xAxis, \" \").concat(analysis.dataTypes[analysis.mapping.xAxis] ? \"(\".concat(analysis.dataTypes[analysis.mapping.xAxis], \")\") : \"\"),\n                        font: {\n                            size: 12,\n                            color: \"#ea580c\"\n                        }\n                    },\n                    showbackground: true,\n                    backgroundcolor: \"rgba(240, 240, 240, 0.8)\"\n                },\n                yaxis: {\n                    title: {\n                        text: \"\".concat(analysis.mapping.yAxis, \" \").concat(analysis.dataTypes[analysis.mapping.yAxis] ? \"(\".concat(analysis.dataTypes[analysis.mapping.yAxis], \")\") : \"\"),\n                        font: {\n                            size: 12,\n                            color: \"#ea580c\"\n                        }\n                    },\n                    showbackground: true,\n                    backgroundcolor: \"rgba(240, 240, 240, 0.8)\"\n                },\n                zaxis: {\n                    title: {\n                        text: \"\".concat(analysis.mapping.zAxis, \" \").concat(analysis.dataTypes[analysis.mapping.zAxis] ? \"(\".concat(analysis.dataTypes[analysis.mapping.zAxis], \")\") : \"\"),\n                        font: {\n                            size: 12,\n                            color: \"#ea580c\"\n                        }\n                    },\n                    showbackground: true,\n                    backgroundcolor: \"rgba(240, 240, 240, 0.8)\"\n                },\n                camera: {\n                    eye: {\n                        x: 1.25,\n                        y: 1.25,\n                        z: 1.25\n                    }\n                }\n            },\n            title: {\n                text: title,\n                font: {\n                    size: 18,\n                    color: \"#ea580c\"\n                }\n            },\n            paper_bgcolor: \"rgba(0,0,0,0)\",\n            margin: {\n                l: 0,\n                r: 0,\n                t: 60,\n                b: 0\n            },\n            annotations: [\n                {\n                    text: \"<b>Mod\\xe8le:</b> \".concat(title, \"<br><b>Donn\\xe9es:</b> \").concat(dataInfo, \"<br><b>Mapping:</b><br>• X: \").concat(analysis.mapping.xAxis, \"<br>• Y: \").concat(analysis.mapping.yAxis, \"<br>• Z: \").concat(analysis.mapping.zAxis, \"<br>• Couleur: \").concat(analysis.mapping.colorBy, \"<br>• Taille: \").concat(analysis.mapping.sizeBy).concat(analysis.mapping.categoryBy ? \"<br>• Cat\\xe9gorie: \".concat(analysis.mapping.categoryBy) : \"\"),\n                    showarrow: false,\n                    xref: \"paper\",\n                    yref: \"paper\",\n                    x: -0.15,\n                    y: 0.95,\n                    xanchor: \"left\",\n                    yanchor: \"top\",\n                    bgcolor: \"rgba(255, 255, 255, 0.8)\",\n                    bordercolor: \"rgba(234, 88, 12, 0.3)\",\n                    borderwidth: 1,\n                    font: {\n                        size: 8,\n                        color: \"#666\"\n                    }\n                }\n            ]\n        };\n    };\n    const getPlotConfig = ()=>({\n            responsive: true,\n            displayModeBar: false,\n            staticPlot: false,\n            scrollZoom: true,\n            doubleClick: \"reset\"\n        });\n    const renderV0Visualization = (config)=>{\n        try {\n            window.Plotly.newPlot(plotRef.current, config.config.data, config.config.layout, getPlotConfig());\n        } catch (error) {\n            console.error(\"Erreur rendu v0:\", error);\n            renderModelSpecificVisualization();\n        }\n    };\n    const renderDemoVisualization = ()=>{\n        const demoData = Array.from({\n            length: 50\n        }, (_, i)=>({\n                x: Math.random() * 10,\n                y: Math.random() * 10,\n                z: Math.random() * 10,\n                value: Math.random() * 100,\n                category: \"Cat\".concat(Math.floor(Math.random() * 5) + 1)\n            }));\n        setDataMapping({\n            xAxis: \"Dimension X\",\n            yAxis: \"Dimension Y\",\n            zAxis: \"Dimension Z\",\n            colorBy: \"Valeur\",\n            sizeBy: \"Valeur\"\n        });\n        const plotData = [\n            {\n                type: \"scatter3d\",\n                mode: \"markers\",\n                x: demoData.map((d)=>d.x),\n                y: demoData.map((d)=>d.y),\n                z: demoData.map((d)=>d.z),\n                marker: {\n                    size: 8,\n                    color: demoData.map((d)=>d.value),\n                    colorscale: \"Rainbow\",\n                    opacity: 0.8\n                },\n                name: \"D\\xe9monstration\"\n            }\n        ];\n        const layout = {\n            scene: {\n                xaxis: {\n                    title: \"Dimension X\",\n                    showbackground: true,\n                    backgroundcolor: \"rgba(240, 240, 240, 0.8)\"\n                },\n                yaxis: {\n                    title: \"Dimension Y\",\n                    showbackground: true,\n                    backgroundcolor: \"rgba(240, 240, 240, 0.8)\"\n                },\n                zaxis: {\n                    title: \"Dimension Z\",\n                    showbackground: true,\n                    backgroundcolor: \"rgba(240, 240, 240, 0.8)\"\n                },\n                camera: {\n                    eye: {\n                        x: 1.25,\n                        y: 1.25,\n                        z: 1.25\n                    }\n                }\n            },\n            title: {\n                text: \"D\\xe9monstration - \".concat(getModelName(visualizationType)),\n                font: {\n                    size: 18,\n                    color: \"#ea580c\"\n                }\n            },\n            paper_bgcolor: \"rgba(0,0,0,0)\",\n            margin: {\n                l: 0,\n                r: 0,\n                t: 60,\n                b: 0\n            }\n        };\n        window.Plotly.newPlot(plotRef.current, plotData, layout, getPlotConfig());\n    };\n    const getModelName = (modelId)=>{\n        const names = {\n            scatter3d: \"Nuage 3D Classique\",\n            scatter_density: \"Densit\\xe9 3D\",\n            scatter_bubble: \"Bulles 3D\",\n            mandala_3d: \"Mandala 3D\",\n            galaxy_3d: \"Galaxie 3D\",\n            surface_contour: \"Surface Contours\",\n            dna_helix: \"H\\xe9lice ADN\",\n            timeline_3d: \"Timeline 3D\"\n        };\n        return names[modelId] || \"Visualisation 3D\";\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"h-full bg-gradient-to-br from-orange-50 to-white rounded-xl border-2 border-orange-200 overflow-hidden\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"p-6 border-b border-orange-200 bg-white\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex items-center justify-between\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex items-center space-x-3\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"w-12 h-12 bg-gradient-to-br from-orange-600 to-orange-500 rounded-xl flex items-center justify-center\",\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Code_TrendingUp_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                                        className: \"w-6 h-6 text-white\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                        lineNumber: 1132,\n                                        columnNumber: 15\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                    lineNumber: 1131,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                            className: \"text-xl font-bold text-gray-800\",\n                                            children: \"Canvas IA • Visualisation Dynamique\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                            lineNumber: 1135,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                            className: \"text-sm text-gray-600\",\n                                            children: data.length > 0 ? \"\".concat(data.length, \" \\xe9chantillons • \").concat(columns.length, \" variables • \").concat(getModelName(currentModel)) : \"Mode d\\xe9monstration • \".concat(getModelName(currentModel))\n                                        }, void 0, false, {\n                                            fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                            lineNumber: 1136,\n                                            columnNumber: 15\n                                        }, this),\n                                        dataAnalysis && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                            className: \"text-xs text-gray-500\",\n                                            children: [\n                                                dataAnalysis.numericColumns.length,\n                                                \" num\\xe9riques • \",\n                                                dataAnalysis.categoricalColumns.length,\n                                                \" \",\n                                                \"cat\\xe9gorielles • \",\n                                                dataAnalysis.temporalColumns.length,\n                                                \" temporelles\"\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                            lineNumber: 1142,\n                                            columnNumber: 17\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                    lineNumber: 1134,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                            lineNumber: 1130,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex items-center space-x-2\",\n                            children: [\n                                isV0Generated && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    className: \"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Code_TrendingUp_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                            className: \"w-3 h-3 mr-1\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                            lineNumber: 1153,\n                                            columnNumber: 17\n                                        }, this),\n                                        \"G\\xe9n\\xe9r\\xe9 par v0\"\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                    lineNumber: 1152,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    className: \"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Code_TrendingUp_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                                            className: \"w-3 h-3 mr-1\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                            lineNumber: 1158,\n                                            columnNumber: 15\n                                        }, this),\n                                        \"Plotly v2.35\"\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                    lineNumber: 1157,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    className: \"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800\",\n                                    children: \"Adaptatif Dynamique\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                    lineNumber: 1161,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                            lineNumber: 1150,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                    lineNumber: 1129,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                lineNumber: 1128,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"relative h-[calc(100%-120px)]\",\n                children: !plotlyLoaded ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex items-center justify-center h-full\",\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"text-center\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"w-8 h-8 border-2 border-orange-500 border-t-transparent rounded-full animate-spin mx-auto mb-4\"\n                            }, void 0, false, {\n                                fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                lineNumber: 1173,\n                                columnNumber: 15\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                className: \"text-gray-600\",\n                                children: \"Chargement de Plotly.js v2.35...\"\n                            }, void 0, false, {\n                                fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                lineNumber: 1174,\n                                columnNumber: 15\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                className: \"text-sm text-gray-500 mt-2\",\n                                children: \"Analyse dynamique des donn\\xe9es en cours...\"\n                            }, void 0, false, {\n                                fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                                lineNumber: 1175,\n                                columnNumber: 15\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                        lineNumber: 1172,\n                        columnNumber: 13\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                    lineNumber: 1171,\n                    columnNumber: 11\n                }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    ref: plotRef,\n                    className: \"w-full h-full\"\n                }, void 0, false, {\n                    fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                    lineNumber: 1179,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n                lineNumber: 1169,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/charles-henrynoah/Desktop/eidos/Eidos/components/Canvas3DVisualization.tsx\",\n        lineNumber: 1126,\n        columnNumber: 5\n    }, this);\n}\n_s(Canvas3DVisualization, \"eO0E6itovXilb3IAoe61XKZZfX8=\");\n_c = Canvas3DVisualization;\nvar _c;\n$RefreshReg$(_c, \"Canvas3DVisualization\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/Canvas3DVisualization.tsx\n"));

/***/ })

});